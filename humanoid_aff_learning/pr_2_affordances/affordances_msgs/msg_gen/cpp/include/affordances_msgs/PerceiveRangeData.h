/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/to_do/Dropbox/kovan/pr_2_affordances/affordances_msgs/msg/PerceiveRangeData.msg */
#ifndef AFFORDANCES_MSGS_MESSAGE_PERCEIVERANGEDATA_H
#define AFFORDANCES_MSGS_MESSAGE_PERCEIVERANGEDATA_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace affordances_msgs
{
template <class ContainerAllocator>
struct PerceiveRangeData_ : public ros::Message
{
  typedef PerceiveRangeData_<ContainerAllocator> Type;

  PerceiveRangeData_()
  : do_perceive(false)
  {
  }

  PerceiveRangeData_(const ContainerAllocator& _alloc)
  : do_perceive(false)
  {
  }

  typedef uint8_t _do_perceive_type;
  uint8_t do_perceive;


private:
  static const char* __s_getDataType_() { return "affordances_msgs/PerceiveRangeData"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8addac4e4f12ab38392d4ae360422b58"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool do_perceive\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, do_perceive);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, do_perceive);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(do_perceive);
    return size;
  }

  typedef boost::shared_ptr< ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::affordances_msgs::PerceiveRangeData_<ContainerAllocator>  const> ConstPtr;
}; // struct PerceiveRangeData
typedef  ::affordances_msgs::PerceiveRangeData_<std::allocator<void> > PerceiveRangeData;

typedef boost::shared_ptr< ::affordances_msgs::PerceiveRangeData> PerceiveRangeDataPtr;
typedef boost::shared_ptr< ::affordances_msgs::PerceiveRangeData const> PerceiveRangeDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace affordances_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8addac4e4f12ab38392d4ae360422b58";
  }

  static const char* value(const  ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8addac4e4f12ab38ULL;
  static const uint64_t static_value2 = 0x392d4ae360422b58ULL;
};

template<class ContainerAllocator>
struct DataType< ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "affordances_msgs/PerceiveRangeData";
  }

  static const char* value(const  ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool do_perceive\n\
\n\
";
  }

  static const char* value(const  ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.do_perceive);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PerceiveRangeData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::affordances_msgs::PerceiveRangeData_<ContainerAllocator> & v) 
  {
    s << indent << "do_perceive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.do_perceive);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AFFORDANCES_MSGS_MESSAGE_PERCEIVERANGEDATA_H

