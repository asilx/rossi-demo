/* Auto-generated by genmsg_cpp for file /home/asil/rossi_workspace/metu-ros-pkg/stacks/aff_learning/humanoid_aff_learning/icub_aff_learning/behavior_manager/srv/Action.srv */
#ifndef BEHAVIOR_MANAGER_SERVICE_ACTION_H
#define BEHAVIOR_MANAGER_SERVICE_ACTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace behavior_manager
{
template <class ContainerAllocator>
struct ActionRequest_ {
  typedef ActionRequest_<ContainerAllocator> Type;

  ActionRequest_()
  : task(0)
  , arg(0)
  , pushable_object_center()
  , pushable_object_size()
  , experimentEpoch(0)
  {
  }

  ActionRequest_(const ContainerAllocator& _alloc)
  : task(0)
  , arg(0)
  , pushable_object_center(_alloc)
  , pushable_object_size(_alloc)
  , experimentEpoch(0)
  {
  }

  typedef int8_t _task_type;
  int8_t task;

  typedef int8_t _arg_type;
  int8_t arg;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pushable_object_center_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  pushable_object_center;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pushable_object_size_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  pushable_object_size;

  typedef uint8_t _experimentEpoch_type;
  uint8_t experimentEpoch;

  enum { DONT_ACT = -1 };
  enum { PUSH_RIGHT = 0 };
  enum { PUSH_LEFT = 1 };
  enum { PUSH_RIGHT_UPPER = 24 };
  enum { PUSH_LEFT_UPPER = 25 };
  enum { PUSH_FORWARD = 2 };
  enum { PUSH_BACKWARD = 3 };
  enum { LIFT = 4 };
  enum { GRASP = 5 };
  enum { GRASP_UPPER = 26 };
  enum { HOME = 6 };
  enum { POINT = 7 };
  enum { HIDE = 8 };
  enum { CANCEL = 9 };
  enum { STOP = 10 };
  enum { SHOW = 11 };
  enum { TUCK_ARMS = 12 };
  enum { LOOK_AT_REGION = 13 };
  enum { LOOK_AT_POINT = 14 };
  enum { LOOK_AT_FACE = 15 };
  enum { REACH = 16 };
  enum { TAKE = 17 };
  enum { GIVE = 18 };
  enum { RELEASE = 19 };
  enum { RELEASE_UPWARD = 20 };
  enum { RELEASE_DOWNWARD = 21 };
  enum { COVER = 22 };
  enum { DROP = 23 };
  enum { DETECT_TOUCH = 27 };

  ROS_DEPRECATED uint32_t get_pushable_object_center_size() const { return (uint32_t)pushable_object_center.size(); }
  ROS_DEPRECATED void set_pushable_object_center_size(uint32_t size) { pushable_object_center.resize((size_t)size); }
  ROS_DEPRECATED void get_pushable_object_center_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->pushable_object_center; }
  ROS_DEPRECATED void set_pushable_object_center_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->pushable_object_center = vec; }
  ROS_DEPRECATED uint32_t get_pushable_object_size_size() const { return (uint32_t)pushable_object_size.size(); }
  ROS_DEPRECATED void set_pushable_object_size_size(uint32_t size) { pushable_object_size.resize((size_t)size); }
  ROS_DEPRECATED void get_pushable_object_size_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->pushable_object_size; }
  ROS_DEPRECATED void set_pushable_object_size_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->pushable_object_size = vec; }
private:
  static const char* __s_getDataType_() { return "behavior_manager/ActionRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ddc8d05569ef3b27a14579c2b5cc4e70"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "ac065fe0178768b8f4c4d0241aa49c96"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 DONT_ACT = -1\n\
int8 PUSH_RIGHT = 0\n\
int8 PUSH_LEFT =1\n\
int8 PUSH_RIGHT_UPPER = 24\n\
int8 PUSH_LEFT_UPPER = 25\n\
int8 PUSH_FORWARD =2\n\
int8 PUSH_BACKWARD=3\n\
int8 LIFT=4\n\
int8 GRASP=5\n\
int8 GRASP_UPPER=26\n\
int8 HOME=6\n\
int8 POINT=7\n\
int8 HIDE=8\n\
int8 CANCEL=9\n\
int8 STOP=10\n\
int8 SHOW=11\n\
int8 TUCK_ARMS=12\n\
int8 LOOK_AT_REGION=13\n\
int8 LOOK_AT_POINT=14\n\
int8 LOOK_AT_FACE=15\n\
int8 REACH=16\n\
int8 TAKE=17\n\
int8 GIVE=18\n\
int8 RELEASE=19\n\
int8 RELEASE_UPWARD=20\n\
int8 RELEASE_DOWNWARD=21\n\
int8 COVER=22\n\
int8 DROP=23\n\
int8 DETECT_TOUCH=27\n\
int8 task\n\
int8 arg\n\
float32[] pushable_object_center\n\
float32[] pushable_object_size\n\
uint8 experimentEpoch\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, task);
    ros::serialization::serialize(stream, arg);
    ros::serialization::serialize(stream, pushable_object_center);
    ros::serialization::serialize(stream, pushable_object_size);
    ros::serialization::serialize(stream, experimentEpoch);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, task);
    ros::serialization::deserialize(stream, arg);
    ros::serialization::deserialize(stream, pushable_object_center);
    ros::serialization::deserialize(stream, pushable_object_size);
    ros::serialization::deserialize(stream, experimentEpoch);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(task);
    size += ros::serialization::serializationLength(arg);
    size += ros::serialization::serializationLength(pushable_object_center);
    size += ros::serialization::serializationLength(pushable_object_size);
    size += ros::serialization::serializationLength(experimentEpoch);
    return size;
  }

  typedef boost::shared_ptr< ::behavior_manager::ActionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_manager::ActionRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ActionRequest
typedef  ::behavior_manager::ActionRequest_<std::allocator<void> > ActionRequest;

typedef boost::shared_ptr< ::behavior_manager::ActionRequest> ActionRequestPtr;
typedef boost::shared_ptr< ::behavior_manager::ActionRequest const> ActionRequestConstPtr;


template <class ContainerAllocator>
struct ActionResponse_ {
  typedef ActionResponse_<ContainerAllocator> Type;

  ActionResponse_()
  : feedback(0)
  {
  }

  ActionResponse_(const ContainerAllocator& _alloc)
  : feedback(0)
  {
  }

  typedef uint8_t _feedback_type;
  uint8_t feedback;

  enum { DONE = 1 };

private:
  static const char* __s_getDataType_() { return "behavior_manager/ActionResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0c33925582a4cf8db9f48c73fab8a9c4"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "ac065fe0178768b8f4c4d0241aa49c96"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
uint8 DONE = 1\n\
uint8 feedback\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, feedback);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, feedback);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(feedback);
    return size;
  }

  typedef boost::shared_ptr< ::behavior_manager::ActionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_manager::ActionResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ActionResponse
typedef  ::behavior_manager::ActionResponse_<std::allocator<void> > ActionResponse;

typedef boost::shared_ptr< ::behavior_manager::ActionResponse> ActionResponsePtr;
typedef boost::shared_ptr< ::behavior_manager::ActionResponse const> ActionResponseConstPtr;

struct Action
{

typedef ActionRequest Request;
typedef ActionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Action
} // namespace behavior_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::ActionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::ActionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::behavior_manager::ActionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ddc8d05569ef3b27a14579c2b5cc4e70";
  }

  static const char* value(const  ::behavior_manager::ActionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xddc8d05569ef3b27ULL;
  static const uint64_t static_value2 = 0xa14579c2b5cc4e70ULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_manager::ActionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/ActionRequest";
  }

  static const char* value(const  ::behavior_manager::ActionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::behavior_manager::ActionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 DONT_ACT = -1\n\
int8 PUSH_RIGHT = 0\n\
int8 PUSH_LEFT =1\n\
int8 PUSH_RIGHT_UPPER = 24\n\
int8 PUSH_LEFT_UPPER = 25\n\
int8 PUSH_FORWARD =2\n\
int8 PUSH_BACKWARD=3\n\
int8 LIFT=4\n\
int8 GRASP=5\n\
int8 GRASP_UPPER=26\n\
int8 HOME=6\n\
int8 POINT=7\n\
int8 HIDE=8\n\
int8 CANCEL=9\n\
int8 STOP=10\n\
int8 SHOW=11\n\
int8 TUCK_ARMS=12\n\
int8 LOOK_AT_REGION=13\n\
int8 LOOK_AT_POINT=14\n\
int8 LOOK_AT_FACE=15\n\
int8 REACH=16\n\
int8 TAKE=17\n\
int8 GIVE=18\n\
int8 RELEASE=19\n\
int8 RELEASE_UPWARD=20\n\
int8 RELEASE_DOWNWARD=21\n\
int8 COVER=22\n\
int8 DROP=23\n\
int8 DETECT_TOUCH=27\n\
int8 task\n\
int8 arg\n\
float32[] pushable_object_center\n\
float32[] pushable_object_size\n\
uint8 experimentEpoch\n\
\n\
";
  }

  static const char* value(const  ::behavior_manager::ActionRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::ActionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::ActionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::behavior_manager::ActionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0c33925582a4cf8db9f48c73fab8a9c4";
  }

  static const char* value(const  ::behavior_manager::ActionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0c33925582a4cf8dULL;
  static const uint64_t static_value2 = 0xb9f48c73fab8a9c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_manager::ActionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/ActionResponse";
  }

  static const char* value(const  ::behavior_manager::ActionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::behavior_manager::ActionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
uint8 DONE = 1\n\
uint8 feedback\n\
\n\
\n\
";
  }

  static const char* value(const  ::behavior_manager::ActionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::behavior_manager::ActionResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::behavior_manager::ActionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.task);
    stream.next(m.arg);
    stream.next(m.pushable_object_center);
    stream.next(m.pushable_object_size);
    stream.next(m.experimentEpoch);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ActionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::behavior_manager::ActionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.feedback);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ActionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<behavior_manager::Action> {
  static const char* value() 
  {
    return "ac065fe0178768b8f4c4d0241aa49c96";
  }

  static const char* value(const behavior_manager::Action&) { return value(); } 
};

template<>
struct DataType<behavior_manager::Action> {
  static const char* value() 
  {
    return "behavior_manager/Action";
  }

  static const char* value(const behavior_manager::Action&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<behavior_manager::ActionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac065fe0178768b8f4c4d0241aa49c96";
  }

  static const char* value(const behavior_manager::ActionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<behavior_manager::ActionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/Action";
  }

  static const char* value(const behavior_manager::ActionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<behavior_manager::ActionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac065fe0178768b8f4c4d0241aa49c96";
  }

  static const char* value(const behavior_manager::ActionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<behavior_manager::ActionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/Action";
  }

  static const char* value(const behavior_manager::ActionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BEHAVIOR_MANAGER_SERVICE_ACTION_H

