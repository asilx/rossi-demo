"""autogenerated by genmsg_py from Perception2DRequest.msg. Do not edit."""
import roslib.message
import struct


class Perception2DRequest(roslib.message.Message):
  _md5sum = "9135b8f36be2b25d9bf7c242938ee0a0"
  _type = "tabletop_2D_segmentation/Perception2DRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 DO_PERCEPT = 0
uint8 EXTRACT_EFFECT = 1
uint8 task
int8 arg
int8 arg2

"""
  # Pseudo-constants
  DO_PERCEPT = 0
  EXTRACT_EFFECT = 1

  __slots__ = ['task','arg','arg2']
  _slot_types = ['uint8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       task,arg,arg2
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Perception2DRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.task is None:
        self.task = 0
      if self.arg is None:
        self.arg = 0
      if self.arg2 is None:
        self.arg2 = 0
    else:
      self.task = 0
      self.arg = 0
      self.arg2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_B2b.pack(_x.task, _x.arg, _x.arg2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.task, _x.arg, _x.arg2,) = _struct_B2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_B2b.pack(_x.task, _x.arg, _x.arg2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.task, _x.arg, _x.arg2,) = _struct_B2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B2b = struct.Struct("<B2b")
"""autogenerated by genmsg_py from Perception2DResponse.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg
import sensor_msgs.msg

class Perception2DResponse(roslib.message.Message):
  _md5sum = "91f80513e8b2f01e9a78a80e67ba125c"
  _type = "tabletop_2D_segmentation/Perception2DResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


sensor_msgs/Image raw_image
sensor_msgs/Image filtered_image
sensor_msgs/RegionOfInterest roi
bool face_detected
int16 ooi_area
int8[] ooi_color_r_hist
int8[] ooi_color_g_hist
int8[] ooi_color_b_hist


================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

"""
  __slots__ = ['raw_image','filtered_image','roi','face_detected','ooi_area','ooi_color_r_hist','ooi_color_g_hist','ooi_color_b_hist']
  _slot_types = ['sensor_msgs/Image','sensor_msgs/Image','sensor_msgs/RegionOfInterest','bool','int16','int8[]','int8[]','int8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       raw_image,filtered_image,roi,face_detected,ooi_area,ooi_color_r_hist,ooi_color_g_hist,ooi_color_b_hist
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Perception2DResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.raw_image is None:
        self.raw_image = sensor_msgs.msg.Image()
      if self.filtered_image is None:
        self.filtered_image = sensor_msgs.msg.Image()
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      if self.face_detected is None:
        self.face_detected = False
      if self.ooi_area is None:
        self.ooi_area = 0
      if self.ooi_color_r_hist is None:
        self.ooi_color_r_hist = []
      if self.ooi_color_g_hist is None:
        self.ooi_color_g_hist = []
      if self.ooi_color_b_hist is None:
        self.ooi_color_b_hist = []
    else:
      self.raw_image = sensor_msgs.msg.Image()
      self.filtered_image = sensor_msgs.msg.Image()
      self.roi = sensor_msgs.msg.RegionOfInterest()
      self.face_detected = False
      self.ooi_area = 0
      self.ooi_color_r_hist = []
      self.ooi_color_g_hist = []
      self.ooi_color_b_hist = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.raw_image.header.seq, _x.raw_image.header.stamp.secs, _x.raw_image.header.stamp.nsecs))
      _x = self.raw_image.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.raw_image.height, _x.raw_image.width))
      _x = self.raw_image.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.raw_image.is_bigendian, _x.raw_image.step))
      _x = self.raw_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.filtered_image.header.seq, _x.filtered_image.header.stamp.secs, _x.filtered_image.header.stamp.nsecs))
      _x = self.filtered_image.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.filtered_image.height, _x.filtered_image.width))
      _x = self.filtered_image.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.filtered_image.is_bigendian, _x.filtered_image.step))
      _x = self.filtered_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4I2Bh.pack(_x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.face_detected, _x.ooi_area))
      length = len(self.ooi_color_r_hist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.ooi_color_r_hist))
      length = len(self.ooi_color_g_hist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.ooi_color_g_hist))
      length = len(self.ooi_color_b_hist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.ooi_color_b_hist))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.raw_image is None:
        self.raw_image = sensor_msgs.msg.Image()
      if self.filtered_image is None:
        self.filtered_image = sensor_msgs.msg.Image()
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.raw_image.header.seq, _x.raw_image.header.stamp.secs, _x.raw_image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.raw_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.raw_image.height, _x.raw_image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.raw_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.raw_image.is_bigendian, _x.raw_image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.raw_image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.filtered_image.header.seq, _x.filtered_image.header.stamp.secs, _x.filtered_image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.filtered_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.filtered_image.height, _x.filtered_image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.filtered_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.filtered_image.is_bigendian, _x.filtered_image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.filtered_image.data = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.face_detected, _x.ooi_area,) = _struct_4I2Bh.unpack(str[start:end])
      self.roi.do_rectify = bool(self.roi.do_rectify)
      self.face_detected = bool(self.face_detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.ooi_color_r_hist = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.ooi_color_g_hist = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.ooi_color_b_hist = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.raw_image.header.seq, _x.raw_image.header.stamp.secs, _x.raw_image.header.stamp.nsecs))
      _x = self.raw_image.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.raw_image.height, _x.raw_image.width))
      _x = self.raw_image.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.raw_image.is_bigendian, _x.raw_image.step))
      _x = self.raw_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.filtered_image.header.seq, _x.filtered_image.header.stamp.secs, _x.filtered_image.header.stamp.nsecs))
      _x = self.filtered_image.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.filtered_image.height, _x.filtered_image.width))
      _x = self.filtered_image.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.filtered_image.is_bigendian, _x.filtered_image.step))
      _x = self.filtered_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4I2Bh.pack(_x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.face_detected, _x.ooi_area))
      length = len(self.ooi_color_r_hist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.ooi_color_r_hist.tostring())
      length = len(self.ooi_color_g_hist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.ooi_color_g_hist.tostring())
      length = len(self.ooi_color_b_hist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.ooi_color_b_hist.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.raw_image is None:
        self.raw_image = sensor_msgs.msg.Image()
      if self.filtered_image is None:
        self.filtered_image = sensor_msgs.msg.Image()
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.raw_image.header.seq, _x.raw_image.header.stamp.secs, _x.raw_image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.raw_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.raw_image.height, _x.raw_image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.raw_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.raw_image.is_bigendian, _x.raw_image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.raw_image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.filtered_image.header.seq, _x.filtered_image.header.stamp.secs, _x.filtered_image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.filtered_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.filtered_image.height, _x.filtered_image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.filtered_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.filtered_image.is_bigendian, _x.filtered_image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.filtered_image.data = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.face_detected, _x.ooi_area,) = _struct_4I2Bh.unpack(str[start:end])
      self.roi.do_rectify = bool(self.roi.do_rectify)
      self.face_detected = bool(self.face_detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.ooi_color_r_hist = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.ooi_color_g_hist = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.ooi_color_b_hist = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_4I2Bh = struct.Struct("<4I2Bh")
_struct_2I = struct.Struct("<2I")
_struct_BI = struct.Struct("<BI")
class Perception2D(roslib.message.ServiceDefinition):
  _type          = 'tabletop_2D_segmentation/Perception2D'
  _md5sum = '1da76ff735fd425703f5cdeb93da420c'
  _request_class  = Perception2DRequest
  _response_class = Perception2DResponse
