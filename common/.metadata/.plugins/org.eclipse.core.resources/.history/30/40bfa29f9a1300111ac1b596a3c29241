/*
 * main.cpp
 *
 *  Created on: Nov 19, 2011
 *      Author: kadir
 */

#include "visualization_msgs/MarkerArray.h"
#include "ros/ros.h"

#include "aff_msgs/ObjectOfInterest.h"

//std::vector<float> ooi_center;
//std::vector<float> ooi_dims;
//std::vector<std::string> affordances;

aff_msgs::ObjectOfInterest ooi_;
ros::Publisher pub_aff_markers;
ros::Subscriber sub_aff_labels;
visualization_msgs::MarkerArray aff_markers;

void updateAffordanceMarkers(aff_msgs::ObjectOfInterest& ooi_, visualization_msgs::MarkerArray& aff_markers)
{
  //delete the boxes already being sent
  for (uint i = 0; i < aff_markers.markers.size (); i++)
    aff_markers.markers[i].action = visualization_msgs::Marker::DELETE;

  //publish for deleting them
  pub_aff_markers.publish (aff_markers);

  aff_markers.markers.resize(ooi_.affordances.size());

  for(uint8_t i=0; i<ooi_.affordances.size();i++)
  {
    visualization_msgs::Marker marker;

    //create bounding box first
    marker.header.frame_id = "/base_link";
    marker.header.stamp = ros::Time::now ();
    marker.ns = "aff_marker_texts";
    marker.id = i;
    marker.type = visualization_msgs::Marker::TEXT_VIEW_FACING;
    marker.action = visualization_msgs::Marker::ADD;
    marker.pose.position.x = ooi_.object_center[0];
    marker.pose.position.y = ooi_.object_center[1];
    marker.pose.position.z = ooi_.object_center[2];
    marker.pose.orientation.x = 0.0;
    marker.pose.orientation.y = 0.0;
    marker.pose.orientation.z = 0.0;
    marker.pose.orientation.w = 1.0;

    marker.text = ooi_.affordances[i].c_str();
    marker.pose.position.z += (marker.scale.z / 2.0 + 0.2*(i+1));
    marker.scale.x = 0.5;
    marker.scale.y = 0.2;
    marker.scale.z = 0.2;

    aff_markers.markers[i]=marker;
  }
}

void affLabelsCallback(aff_msgs::ObjectOfInterestConstPtr ooi_msg)
{
//  ooi_center = ooi_msg->object_center;
//  ooi_dims = ooi_msg->object_size;

  ooi_ = *ooi_msg;
//  updateAffordanceMarkers(ooi_, aff_markers);

//  for(uint8_t i=0;i<aff_markers.markers.size();i++)
//  {
//    std::cout<<aff_markers.markers[i].text<<std::endl;
//
//    std::cout<<aff_markers.markers[i].pose.position.x<<" "
//        <<aff_markers.markers[i].pose.position.y<<" "
//        <<aff_markers.markers[i].pose.position.z<<std::endl;
//
//    std::cout<<aff_markers.markers[i].scale.x<<" "
//              <<aff_markers.markers[i].scale.y<<" "
//              <<aff_markers.markers[i].scale.z<<std::endl;
//
//  }

}



void publishAffordanceMarkers(const aff_msgs::ObjectOfInterest& ooi_msg)
{

  updateAffordanceMarkers(ooi_, aff_markers);

  if(pub_aff_markers.getNumSubscribers() > 0)
    pub_aff_markers.publish(aff_markers);
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "aff_visualizer");
  ros::NodeHandle nh;
  sub_aff_labels = nh.subscribe("/aff_labels", 10, &affLabelsCallback);
  pub_aff_markers = nh.advertise<visualization_msgs::MarkerArray>("/aff_label_markers", 10);

  ros::Rate r(50);
  while(nh.ok())
  {
//    ros::spinOnce();

    publishAffordanceMarkers(ooi_);
    r.sleep();
    ros::spinOnce();
  }
  return 0;
}
