/*
 * feature_manager subscribes to a pointcloud topic (either PointCloud
 * or PointCloud type when the environment is simulation and real
 * respectively), calls a tabletop segmentation service. then calls
 * a feature extraction service.
 */

#include "iostream"

#include "ros/ros.h"
#include <ros/console.h>

#include "sensor_msgs/point_cloud_conversion.h"
#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/PointCloud.h"

#include "tabletop_object_detector/TabletopSegmentation.h"
#include "tabletop_object_detector/TabletopDetectionResult.h"
#include <visualization_msgs/MarkerArray.h>

#include "pcl/visualization/histogram_visualizer.h"
#include "pcl_ros/features/normal_3d_omp.h"
#include "pcl_ros/filters/statistical_outlier_removal.h"
#include "pcl_ros/filters/radius_outlier_removal.h"
#include <pcl/ros/conversions.h>

//aff_learning includes
//#include "aff_msgs/WorkspaceDetection.h"
#include "aff_msgs/ModuleStates.h"
#include "aff_msgs/ExperimentState.h"
#include "feature_manager/Perception.h"

#include "featurizer.h"

const std::string WORKSPACE_SEGMENTATION_SRV_NAME = "/tabletop_segmentation";
const uint16_t RANGE_IMAGE_HEIGHT = 144;
const uint16_t RANGE_IMAGE_WIDTH = 176;
const double DIFFERENCE_FACTOR = 0.2;

// ++Onur

typedef struct clusterInfo
{
  double centroid[3];
  int numberOfPoints;
  int index;
  int oldIndex;
  bool matched;
} ClusterInfo;

typedef struct indexedClusters
{
  std::vector<sensor_msgs::PointCloud> clusters;
  std::vector<int> cluster_indices;
} IndexedClusters;

int clusterCount;
std::vector<ClusterInfo> clusterIdentifications;

bool firstTime = false;

// --Onur

ros::NodeHandle* nh;
visualization_msgs::MarkerArray bounding_boxes;

ros::Publisher marker_array_pub;
//ros::Publisher pub_all_clusters;
ros::Publisher pub_tabletop_detection;
ros::Publisher pub_pointcloud_raw;
ros::ServiceServer srv_perception;
std::vector<ros::Publisher> pubs_clusters;
ros::Subscriber sub_pointcloud;

ros::ServiceClient object_segmentation_srv;
tabletop_object_detector::TabletopSegmentation segmentation_call;
pcl::RadiusOutlierRemoval<pcl::PointXYZ> outrem;
pcl::PointCloud<pcl::PointXYZ>::Ptr pc2_data_;
sensor_msgs::PointCloud2 pc2_;
uint32_t shape;
uint8_t exp_state_;

//ros::NodeHandle nhfeat("~");
featurizer::Featurizer *featurize//(nhfeat);

//featurizer::Featurizer featurize;

//++Asil
/*
 pcl::NormalEstimationOMP<pcl::PointXYZ, pcl::Normal> ne;
 pcl::PointCloud<pcl::Normal>::Ptr cloud_normals;
 sensor_msgs::PointCloud2 cloud_normals_msg;
 //sensor_msgs::PointCloud2
 pcl::visualization::PCLHistogramVisualizer *phv;
 pcl::PointCloud<pcl::PointXYZ>::Ptr pc2_data_cluster;
 bool window_created = false;
 ros::Publisher pub_dummy_normal;
 */
//--Asil

ros::AsyncSpinner* spinner_;

bool sim = false;

bool module_activation = true;
bool pointcloud_rcvd = false;

// ++ Onur

void
publishClustersOneByOne (const IndexedClusters& rc)//std::vector<sensor_msgs::PointCloud>& clusters)
{
  if (rc.clusters.size () != pubs_clusters.size ())
  {
    pubs_clusters.resize (rc.clusters.size ());

    for (uint i = 0; i < pubs_clusters.size (); i++)
    {
      std::stringstream s;
      std::string cluster_name ("clusters_");

      // some of the previously identified clusters might not exist, hence the caution
      //s << clusterIdentifications[i].oldIndex;
      s << rc.cluster_indices[i];//i;
      cluster_name.append (s.str ());
      pubs_clusters[i] = ros::Publisher (nh->advertise<sensor_msgs::PointCloud> (cluster_name, 10));
    }
  }
  for (uint i = 0; i < pubs_clusters.size (); i++)
  {
    if (pubs_clusters[i].getNumSubscribers () > 0)
      //      pubs_clusters[i].publish (clusters[clusterIdentifications[i].index]);
      pubs_clusters[i].publish (rc.clusters[i]);
  }
}

//void
//publishClustersOneByOne (const std::vector<sensor_msgs::PointCloud>& clusters)
//{
//  if (clusters.size () != pubs_clusters.size ())
//  {
//    pubs_clusters.resize (clusters.size ());
//
//    for (uint i = 0; i < pubs_clusters.size (); i++)
//    {
//      std::stringstream s;
//      std::string cluster_name ("clusters_");
//
//      // some of the previously identified clusters might not exist, hence the caution
//      //s << clusterIdentifications[i].oldIndex;
//      s << i;
//      cluster_name.append (s.str ());
//      pubs_clusters[i] = ros::Publisher (nh->advertise<sensor_msgs::PointCloud> (cluster_name, 10));
//    }
//  }
//  for (uint i = 0; i < pubs_clusters.size (); i++)
//  {
//    if (pubs_clusters[i].getNumSubscribers () > 0)
//      //      pubs_clusters[i].publish (clusters[clusterIdentifications[i].index]);
//      pubs_clusters[i].publish (clusters[i]);
//  }
//}

int
assignClusterIndex (int new_index)
{
  bool exists = false;
  int assignedIndex = new_index;

  for (unsigned int index = 0; index < clusterIdentifications.size (); index++)
  {
    if (clusterIdentifications[index].oldIndex == assignedIndex || exists) // this index was previously
    {
      exists = true;

      // Now, find the largest unoccuppied index value.
      if (assignedIndex < clusterIdentifications[index].oldIndex) // larger than this, please.
        assignedIndex = clusterIdentifications[index].oldIndex + 1;

    }
  }

  if (!exists)
  {
    return new_index;
  }
  else
  {
    return assignedIndex;
  }
}

void
getCentroid (const sensor_msgs::PointCloud &cloud, int cloudSize, double &xCent, double &yCent, double &zCent)
{
  double xSum = 0, ySum = 0, zSum = 0;

  for (int j = 0; j < cloudSize; j++)
  {
    xSum += cloud.points[j].x;
    ySum += cloud.points[j].y;
    zSum += cloud.points[j].z;
  }

  xCent = xSum / cloudSize;
  yCent = ySum / cloudSize;
  zCent = zSum / cloudSize;
}

bool
closeEnough (ClusterInfo* info, int curNumberOfPoints, double xCent, double yCent, double zCent)
{

  if (info->matched) // dismiss the previously matched item!
  {
    return false;
  }

  double countDifference = 1.0 * abs (info->numberOfPoints - curNumberOfPoints);
  double *centroid = info->centroid;

  if (countDifference > DIFFERENCE_FACTOR * info->numberOfPoints)
  {
    return false;
  }

  double xDiff = abs (centroid[0] - xCent), yDiff = abs (centroid[1] - yCent), zDiff = abs (centroid[2] - zCent);

  return (xDiff <= DIFFERENCE_FACTOR * centroid[0]) && (yDiff <= DIFFERENCE_FACTOR * centroid[1]) && (zDiff
      <= DIFFERENCE_FACTOR * centroid[2]);
}

void
reindexClusters (const std::vector<sensor_msgs::PointCloud>& clusters)
{

  int newClusterCount = clusters.size ();
  ClusterInfo* curInfo;

  double xCent, yCent, zCent;
  int curNumberOfPoints, i, j;

  bool matchFound;
  int matchIndex = 0;

  cout << "New cluster count is : " << newClusterCount << endl;

  if (newClusterCount <= 0)
  {
    cout << "This number of clusters is not acceptable" << endl;
    return;
  }

  if (firstTime)
  {
    // Just populate the clusters.

    cout << "First time population" << endl;

    for (i = 0; i < newClusterCount; i++)
    {

      curInfo = new ClusterInfo ();

      curInfo->numberOfPoints = clusters[i].points.size ();
      curInfo->index = i;
      curInfo->oldIndex = i;
      curInfo->matched = true;

      cout << "Do you have a problem with centroid?" << endl;
      getCentroid (clusters[i], curInfo->numberOfPoints, curInfo->centroid[0], curInfo->centroid[1],
                   curInfo->centroid[2]);

      cout << "I thought so" << endl;
      clusterIdentifications.push_back (*curInfo);

    }

    firstTime = false;
  }
  else
  {

    for (i = 0; i < clusterCount; i++)
    {
      clusterIdentifications[i].matched = false;
    }

    /*
     Perform the matching. Greedy, iterative approach is the way to go.

     for i
     1. Find the close enough clusterInfo.
     2.1 if such info does not exist, create one,
     2.2 else, <match> them (set the matched field of the corresponding info object to true)
     3. Remove the unmatched clusters. (check the matched field.)
     4. Set up the list of clouds to be published.
     */

    cout << "Look for matches" << endl;
    for (i = 0; i < newClusterCount; i++)
    {

      matchFound = false;
      // Get the number of points for this cluster
      curNumberOfPoints = clusters[i].points.size ();

      cout << "Getting the centroid of new cluster" << endl;

      // Get the centroid for this cluster

      getCentroid (clusters[i], curNumberOfPoints, xCent, yCent, zCent);

      cout << "OK with this...." << endl;

      // Scan the current list of ClusterInfo objects
      // reminder: currently, clusterCount is the length of the old list of clusters.

      for (j = 0; j < clusterCount && !matchFound; j++)
      {
        if (closeEnough (&clusterIdentifications[j], curNumberOfPoints, xCent, yCent, zCent))
        {
          cout << "AHA - Match found." << endl;
          matchFound = true;
          matchIndex = j; // the jth cluster identification matches with this cluster.
        }
      }

      if (matchFound)
      {
        cout << "Setting the identification" << endl;
        clusterIdentifications[matchIndex].oldIndex = clusterIdentifications[matchIndex].index;
        clusterIdentifications[matchIndex].index = i; // the cloud previously known as matchIndex_th cloud is now the cloud in clusters[i]
        clusterIdentifications[matchIndex].matched = true;
        cout << "ID set" << endl;
      }
      else
      {
        cout << "Hmm, this cluster is new" << endl;
        curInfo = new ClusterInfo ();

        curInfo->centroid[0] = xCent;
        curInfo->centroid[1] = yCent;
        curInfo->centroid[2] = zCent;

        curInfo->numberOfPoints = curNumberOfPoints;
        curInfo->index = i;
        cout << "Started assigning a new clusters " << endl;
        curInfo->oldIndex = assignClusterIndex (i); // TODO: check if this conflicts with some other guy.
        cout << "Assigned " << curInfo->oldIndex << endl;
        curInfo->matched = true;

        clusterIdentifications.push_back (*curInfo);
        cout << "Pushed my new cluster identification" << endl;

      }

    }

    cout << "Match Done " << endl;
    // Prune the unmarked ClusterInfo objects

    for (j = 0; j < clusterIdentifications.size (); j++)
    {
      if (!clusterIdentifications[j].matched)
      {
        cout << "The " << j << "th identification object is to be removed" << endl;
        clusterIdentifications.erase (clusterIdentifications.begin () + j);
        j--;
        cout << "Removed!" << endl;
      }
    }
    cout << "Prune done" << endl;
  }

  // Update the clusterCount
  clusterCount = newClusterCount;
  cout << "hedehodo" << endl;
}

void
getReindexedClusters (const std::vector<sensor_msgs::PointCloud>& clusters, IndexedClusters& rc)
{
  reindexClusters (clusters);
  rc.clusters.resize (clusters.size ());
  rc.cluster_indices.resize (clusters.size ());

  for (unsigned int i = 0; i < clusters.size (); i++)
  {
    rc.clusters[i] = (clusters[clusterIdentifications[i].index]);
    rc.cluster_indices[i] = (clusterIdentifications[i].oldIndex);
  }
}
// -- Onur

//void
//detectWorkspace ()

//void
//publishBoundingBoxes (std::vector<sensor_msgs::PointCloud> clusters)
//{
//  uint n_clusters = clusters.size ();
//
//  for (uint i = 0; i < n_clusters; i++)
//  {
//    std::cout << clusters[i].points.size () << std::endl;
//  }
//
//  //delete the boxes already being sent
//  for (uint i = 0; i < bounding_boxes.markers.size (); i++)
//    bounding_boxes.markers[i].action = visualization_msgs::Marker::DELETE;
//
//  //deletes all the boxes
//  marker_array_pub.publish (bounding_boxes);
//
//  bounding_boxes.markers.resize (n_clusters);
//
//  for (uint i = 0; i < n_clusters; i++)
//  {
//
//    double min_x = 10.0;
//    double max_x = -10.0;
//    double min_y = 10.0;
//    double max_y = -10.0;
//    double min_z = 10.0;
//    double max_z = -10.0;
//
//    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
//    cloud_ptr->width = clusters[i].points.size ();
//    cloud_ptr->height = 1;
//
//    cloud_ptr->points.resize (cloud_ptr->width * cloud_ptr->height);
//    for (uint j = 0; j < cloud_ptr->points.size (); j++)
//    {
//      cloud_ptr->points[j].x = clusters[i].points[j].x;
//      cloud_ptr->points[j].y = clusters[i].points[j].y;
//      cloud_ptr->points[j].z = clusters[i].points[j].z;
//    }
//    outrem.setInputCloud (cloud_ptr);
//    pcl::PointCloud<pcl::PointXYZ> cloud;
//    outrem.filter (cloud);
//
//    for (uint j = 0; j < cloud.points.size (); j++)
//    {
//      if (cloud.points[j].x < min_x)
//        min_x = cloud.points[j].x;
//      else if (cloud.points[j].x > max_x)
//        max_x = cloud.points[j].x;
//
//      if (cloud.points[j].y < min_y)
//        min_y = cloud.points[j].y;
//      else if (cloud.points[j].y > max_y)
//        max_y = cloud.points[j].y;
//
//      if (cloud.points[j].z < min_z)
//        min_z = cloud.points[j].z;
//      else if (cloud.points[j].z > max_z)
//        max_z = cloud.points[j].z;
//    }
//    visualization_msgs::Marker marker;
//    marker.header.frame_id = "/base_link";
//    marker.header.stamp = ros::Time::now ();
//    marker.ns = "bounding_boxes";
//    marker.id = i;
//    marker.type = shape;
//    marker.action = visualization_msgs::Marker::ADD;
//    marker.pose.position.x = (min_x + max_x) / 2;
//    marker.pose.position.y = (min_y + max_y) / 2;
//    marker.pose.position.z = (min_z + max_z) / 2;
//    marker.scale.x = max_x - min_x;
//    marker.scale.y = max_y - min_y;
//    marker.scale.z = max_z - min_z;
//    marker.pose.orientation.x = 0.0;
//    marker.pose.orientation.y = 0.0;
//    marker.pose.orientation.z = 0.0;
//    marker.pose.orientation.w = 1.0;
//
//    if (i == 0)
//    {
//      marker.color.r = 1.0f;
//      marker.color.g = 0.0f;
//      marker.color.b = 0.0f;
//      marker.color.a = 0.5;
//    }
//    else if (i == 1)
//    {
//      marker.color.r = 0.0f;
//      marker.color.g = 1.0f;
//      marker.color.b = 0.0f;
//      marker.color.a = 0.5;
//    }
//    else if (i == 2)
//    {
//      marker.color.r = 0.0f;
//      marker.color.g = 0.0f;
//      marker.color.b = 1.0f;
//      marker.color.a = 0.5;
//    }
//    else
//    {
//      marker.color.r = ((float)(n_clusters - (i + 1))) / n_clusters;
//      marker.color.g = ((float)(i + 1)) / n_clusters;
//      marker.color.b = 0.5;
//      marker.color.a = 0.5;
//    }
//
//    marker.lifetime = ros::Duration ();
//
//    bounding_boxes.markers[i] = marker;
//  }
//  if (marker_array_pub.getNumSubscribers () > 0)
//    marker_array_pub.publish (bounding_boxes);
//}

//void
//publishAllClusters (const std::vector<sensor_msgs::PointCloud>& clusters)
//{
//  for (uint i = 0; i < clusters.size (); i++)
//    if (pub_all_clusters.getNumSubscribers () > 0)
//      pub_all_clusters.publish (clusters[i]);
//}

//void
//publishClustersOneByOne (const std::vector<sensor_msgs::PointCloud>& clusters)
//{
//  if (clusters.size () != pubs_clusters.size ())
//  {
//    pubs_clusters.resize (clusters.size ());
//
//    for (uint i = 0; i < pubs_clusters.size (); i++)
//    {
//      std::stringstream s;
//      std::string cluster_name ("clusters_");
//      s << i;
//      cluster_name.append (s.str ());
//      pubs_clusters[i] = ros::Publisher (nh->advertise<sensor_msgs::PointCloud> (cluster_name, 10));
//    }
//  }
//  for (uint i = 0; i < pubs_clusters.size (); i++)
//  {
//    if (pubs_clusters[i].getNumSubscribers () > 0)
//      pubs_clusters[i].publish (clusters[i]);
//  }
//}


void
publishBoundingBoxes (IndexedClusters& rc)//std::vector<sensor_msgs::PointCloud> clusters)
{
  uint n_clusters = rc.clusters.size ();

  for (uint i = 0; i < n_clusters; i++)
  {
    std::cout << rc.clusters[i].points.size () << std::endl;
  }

  //delete the boxes already being sent
  for (uint i = 0; i < bounding_boxes.markers.size (); i++)
    bounding_boxes.markers[i].action = visualization_msgs::Marker::DELETE;

  //deletes all the boxes
  marker_array_pub.publish (bounding_boxes);

  bounding_boxes.markers.resize (n_clusters);

  for (uint i = 0; i < n_clusters; i++)
  {

    double min_x = 10.0;
    double max_x = -10.0;
    double min_y = 10.0;
    double max_y = -10.0;
    double min_z = 10.0;
    double max_z = -10.0;

    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
    cloud_ptr->width = rc.clusters[i].points.size ();
    cloud_ptr->height = 1;

    cloud_ptr->points.resize (cloud_ptr->width * cloud_ptr->height);
    for (uint j = 0; j < cloud_ptr->points.size (); j++)
    {
      cloud_ptr->points[j].x = rc.clusters[i].points[j].x;
      cloud_ptr->points[j].y = rc.clusters[i].points[j].y;
      cloud_ptr->points[j].z = rc.clusters[i].points[j].z;
    }
    outrem.setInputCloud (cloud_ptr);
    pcl::PointCloud<pcl::PointXYZ> cloud;
    outrem.filter (cloud);

    for (uint j = 0; j < cloud.points.size (); j++)
    {
      if (cloud.points[j].x < min_x)
        min_x = cloud.points[j].x;
      else if (cloud.points[j].x > max_x)
        max_x = cloud.points[j].x;

      if (cloud.points[j].y < min_y)
        min_y = cloud.points[j].y;
      else if (cloud.points[j].y > max_y)
        max_y = cloud.points[j].y;

      if (cloud.points[j].z < min_z)
        min_z = cloud.points[j].z;
      else if (cloud.points[j].z > max_z)
        max_z = cloud.points[j].z;
    }
    visualization_msgs::Marker marker;
    marker.header.frame_id = "/base_link";
    marker.header.stamp = ros::Time::now ();
    marker.ns = "bounding_boxes";
    marker.id = i;
    marker.type = shape;
    marker.action = visualization_msgs::Marker::ADD;
    marker.pose.position.x = (min_x + max_x) / 2;
    marker.pose.position.y = (min_y + max_y) / 2;
    marker.pose.position.z = (min_z + max_z) / 2;
    marker.scale.x = max_x - min_x;
    marker.scale.y = max_y - min_y;
    marker.scale.z = max_z - min_z;
    marker.pose.orientation.x = 0.0;
    marker.pose.orientation.y = 0.0;
    marker.pose.orientation.z = 0.0;
    marker.pose.orientation.w = 1.0;

    if (i == 0)
    {
      marker.color.r = 1.0f;
      marker.color.g = 0.0f;
      marker.color.b = 0.0f;
      marker.color.a = 0.5;
    }
    else if (i == 1)
    {
      marker.color.r = 0.0f;
      marker.color.g = 1.0f;
      marker.color.b = 0.0f;
      marker.color.a = 0.5;
    }
    else if (i == 2)
    {
      marker.color.r = 0.0f;
      marker.color.g = 0.0f;
      marker.color.b = 1.0f;
      marker.color.a = 0.5;
    }
    else
    {
      marker.color.r = ((float)(n_clusters - (i + 1))) / n_clusters;
      marker.color.g = ((float)(i + 1)) / n_clusters;
      marker.color.b = 0.5;
      marker.color.a = 0.5;
    }

    marker.lifetime = ros::Duration ();

    bounding_boxes.markers[i] = marker;
  }
  if (marker_array_pub.getNumSubscribers () > 0)
    marker_array_pub.publish (bounding_boxes);
}

void
publishTabletopDetectionResults (const IndexedClusters &rc,
                                 const tabletop_object_detector::TabletopSegmentationResponse& response)//tabletop_object_detector::TabletopSegmentationResponse& response)
{
  tabletop_object_detector::TabletopDetectionResult msg;
  msg.clusters = rc.clusters;
  msg.result = response.result;
  msg.table = response.table;

  pub_tabletop_detection.publish (msg);
}

void
experimentStateCallback (aff_msgs::ExperimentStateConstPtr exp_state)
{
  exp_state_ = exp_state->experiment_state;
}

void
moduleStateCallback (aff_msgs::ModuleStatesConstPtr module_states)
{
  module_activation = module_states->workspace_detector;
}

void
publishTabletopDetectionResults (const tabletop_object_detector::TabletopSegmentationResponse& response)
{
  tabletop_object_detector::TabletopDetectionResult msg;
  msg.clusters = response.clusters;
  msg.result = response.result;
  msg.table = response.table;

  pub_tabletop_detection.publish (msg);
}

//void
//getMinMax (pcl::PointCloud<pcl::PointXYZ>::Ptr &cloud, int cloudSize, double &xMin, double &yMin, double &zMin,
//           double &xMax, double &yMax, double &zMax)
//{
//  xMin = DBL_MAX;
//  yMin = DBL_MAX;
//  zMin = DBL_MAX;
//  xMax = DBL_MIN;
//  yMax = DBL_MIN;
//  zMax = DBL_MIN;
//
//  for (int i = 0; i < cloudSize; i++)
//  {
//    xMax = max (xMax, cloud->points[i].x);
//    yMax = max (yMax, cloud->points[i].y);
//    zMax = max (zMax, cloud->points[i].z);
//
//    xMin = min (xMin, cloud->points[i].x);
//    yMin = min (yMin, cloud->points[i].y);
//    zMin = min (zMin, cloud->points[i].z);
//  }
//}
//
//void
//getSize (pcl::PointCloud<pcl::PointXYZ>::Ptr &cloud, int cloudSize, double &xSize, double &ySize, double &zSize)
//{
//
//  double xMin, yMin, zMin, xMax, yMax, zMax;
//
//  getMinMax (cloud, cloudSize, xMin, yMin, zMin, xMax, yMax, zMax);
//
//  xSize = xMax - xMin;
//  ySize = yMax - yMin;
//  zSize = zMax - zMin;
//}

void
pcRcvdCallback (sensor_msgs::PointCloud::ConstPtr pc_msg)
{
  if (!pointcloud_rcvd)
    pointcloud_rcvd = true;

  pc2_data_->header = pc_msg->header;
  pc2_data_->height = RANGE_IMAGE_HEIGHT;
  pc2_data_->width = RANGE_IMAGE_WIDTH;
  pc2_data_->is_dense = true; //there are no invalid points

  pc2_data_->points.resize (pc_msg->points.size ());
  for (uint i = 0; i < pc_msg->points.size (); i++)
  {
    //      pc2_data_->points[i].x = pc_msg->points[i].x;
    //TODO: why read points backwards?
    pc2_data_->points[i].x = pc_msg->points[pc_msg->points.size () - 1 - i].x;
    pc2_data_->points[i].y = pc_msg->points[pc_msg->points.size () - 1 - i].y;
    pc2_data_->points[i].z = pc_msg->points[pc_msg->points.size () - 1 - i].z;
  }

  pcl::toROSMsg (*pc2_data_, pc2_);

  //send pointcloud to tabletop detection service
  if (pub_pointcloud_raw.getNumSubscribers () > 0)
    pub_pointcloud_raw.publish (pc2_);

  //    pub_pc2.publish (pc2_);
}

void
pc2RcvdCallback (sensor_msgs::PointCloud2::ConstPtr pc2_msg)
{
  if (!pointcloud_rcvd)
    pointcloud_rcvd = true;

  pc2_ = *pc2_msg;

  //send pointcloud to tabletop detection service
  if (pub_pointcloud_raw.getNumSubscribers () > 0)
    pub_pointcloud_raw.publish (pc2_);
}

bool
perceptionCallback (feature_manager::Perception::Request& request, feature_manager::Perception::Response& response)
{
  if (request.task == feature_manager::Perception::Request::DO_PERCEPT)
  {
    for (uint8_t i = 0; i < segmentation_call.response.clusters.size (); i++)
    {
      sensor_msgs::PointCloud2 pc2_cluster;
      sensor_msgs::convertPointCloudToPointCloud2 (segmentation_call.response.clusters[i], pc2_cluster);
      double* dummy = featurize.extractAndGetFeatures (pc2_cluster);
      for (unsigned int i = 0; i < 40; i++)
      {
        std::cout << dummy[i] << " ";
      }
      std::cout << std::endl;
    }
    std::cout << std::endl;
    std::cout << std::endl;
    std::cout << std::endl;
    std::cout << std::endl;

  }
  else if (request.task == feature_manager::Perception::Request::EXTRACT_EFFECT)
  {

  }

  response.feedback = feature_manager::Perception::Response::DONE;
  for (uint8_t i = 0; i < segmentation_call.response.clusters.size (); i++)
  {
//    double x = 0, y = 0, z = 0;
//    getCentroid (segmentation_call.response.clusters[i], segmentation_call.response.clusters[i].points.size (), x, y, z);
//    double x_size = 0, y_size = 0, z_size = 0;
//    getSize (segmentation_call.response.clusters[i], segmentation_call.response.clusters[i].points.size (), x_size,
//             y_size, z_size);
    double x_min_limit =-0.40, x_max_limit=-0.20, y_min_limit=-0.30, y_max_limit=-0.10, z_min_limit=-0.10, z_max_limit=0;

    if( x_min_limit < bounding_boxes.markers[i].pose.position.x && bounding_boxes.markers[i].pose.position.x < x_max_limit &&
        y_min_limit < bounding_boxes.markers[i].pose.position.y-bounding_boxes.markers[i].scale.y/2 &&
        bounding_boxes.markers[i].pose.position.y-bounding_boxes.markers[i].scale.y/2 < y_max_limit  )
    {
      response.pushable_object_center.resize(3);
      response.pushable_object_center[0] = bounding_boxes.markers[i].pose.position.x;
      response.pushable_object_center[1] = bounding_boxes.markers[i].pose.position.y;
      response.pushable_object_center[2] = bounding_boxes.markers[i].pose.position.z;

      response.pushable_object_size.resize(3);
      response.pushable_object_size[0] = bounding_boxes.markers[i].scale.x;
      response.pushable_object_size[1] = bounding_boxes.markers[i].scale.y;
      response.pushable_object_size[2] = bounding_boxes.markers[i].scale.z;
      break;
    }

  }

  //  response.pushable_object
  return true;
}

void
init ()
{
  nh = new ros::NodeHandle ();

  //nhfeat = new ros::NodeHandle("-");
  nh->getParam ("/use_sim_time", sim);
  if (sim)
    sub_pointcloud = nh->subscribe ("/swissranger/scan", 10, &pcRcvdCallback);
  else
    sub_pointcloud = nh->subscribe ("/swissranger/pointcloud2_raw", 10, &pc2RcvdCallback);

  pub_pointcloud_raw = nh->advertise<sensor_msgs::PointCloud2> ("/pointcloud_raw", 10);

  object_segmentation_srv
      = nh->serviceClient<tabletop_object_detector::TabletopSegmentation> (WORKSPACE_SEGMENTATION_SRV_NAME, true);

  marker_array_pub = nh->advertise<visualization_msgs::MarkerArray> ("bounding_boxes", 1);
  shape = visualization_msgs::Marker::CUBE;

  //  pub_all_clusters = nh->advertise<sensor_msgs::PointCloud2> ("tabletop_clusters", 10);
  pub_tabletop_detection
      = nh->advertise<tabletop_object_detector::TabletopDetectionResult> ("/tabletop_detection_result", 10);

  srv_perception = nh->advertiseService ("/perception", perceptionCallback);

  // build the filter
  outrem.setRadiusSearch (0.05);
  outrem.setMinNeighborsInRadius (150);

  featurize = new featurizer::Featurizer(nh);

  /*
   ne.setNumberOfThreads (4);
   pcl::KdTreeFLANN<pcl::PointXYZ>::Ptr tree (new pcl::KdTreeFLANN<pcl::PointXYZ> ());
   cloud_normals = (pcl::PointCloud<pcl::Normal>::Ptr)new pcl::PointCloud<pcl::Normal>();

   ne.setSearchMethod (tree);
   ne.setRadiusSearch (0.05);

   phv = new pcl::visualization::PCLHistogramVisualizer;
   pc2_data_.reset (new pcl::PointCloud<pcl::PointXYZ>);
   pc2_data_cluster.reset (new pcl::PointCloud<pcl::PointXYZ>);
   pub_dummy_normal = nh->advertise<sensor_msgs::PointCloud2>("/normal_x", 10);
   */

  //spinner for feature extraction and workspace detection services, and also pointcloud callbacks

  spinner_ = new ros::AsyncSpinner (4);
  spinner_->start ();
}

/*
 void
 extractAndVisFeatures (const std::vector<sensor_msgs::PointCloud>& clusters)
 {
 for (uint i = 0; i < clusters.size (); i++)
 {
 sensor_msgs::PointCloud pc_cluster = clusters[i];
 sensor_msgs::PointCloud2 pc2_cluster;
 //    pcl::PointCloud<pcl::PointXYZ> pc_tmp;
 sensor_msgs::convertPointCloudToPointCloud2(pc_cluster, pc2_cluster);

 pcl::fromROSMsg(pc2_cluster, *pc2_data_cluster);
 ne.setInputCloud(pc2_data_cluster);
 ne.compute(*cloud_normals);
 pcl::toROSMsg(*cloud_normals, cloud_normals_msg);

 pub_dummy_normal.publish(cloud_normals_msg);

 //    if(!window_created)
 //    {
 //      phv->addFeatureHistogram(cloud_normals_msg,"normal_x", "normal_x",320, 240);
 //      window_created = true;
 //    }
 //    phv->spinOnce(1,true);

 //        pcl::PointCloud<pcl::Point>
 }
 }
 */

int
main (int argc, char** argv)
{
  ros::init (argc, argv, "workspace_detector");
  init ();
  //wait for detection client
  while (!ros::service::waitForService (WORKSPACE_SEGMENTATION_SRV_NAME, ros::Duration (2.0)) && nh->ok ())
  {
    ROS_INFO("Waiting for object detection service to come up");
  }
  ROS_INFO("object detection service is ready");

  ros::Rate r (10);

  IndexedClusters indexed_clusters;

  while (nh->ok ())
  {
    if (module_activation)//module is activated
    {
      if (pointcloud_rcvd)//
      {
        bool call_segmentation_srv = true;
        bool seg_srv_call = false;

        //make a persistant service call as far as it is applicable
        while (nh->ok () && call_segmentation_srv)
        {
          //call the tabletop detection service
          ROS_INFO("Calling tabletop segmentator");
          seg_srv_call = object_segmentation_srv.call (segmentation_call);

          if (!seg_srv_call)//service couldn't be called, quit
          {
            ROS_ERROR("Tabletop detection service failed");
            return -1;
          }
          else//service successfully called
          {
            if (segmentation_call.response.result == segmentation_call.response.NO_CLOUD_RECEIVED)
            {
              ROS_WARN("no point cloud received by segmentation service. Service is being recalled now...");
            }
            else if (segmentation_call.response.result == segmentation_call.response.NO_TABLE)
            {
              ROS_WARN("Something wrong with the table (no-table). Service is being recalled now...");
            }
            else if (segmentation_call.response.result == segmentation_call.response.OTHER_ERROR)//re-send point cloud
            {
              ROS_WARN("Possible transformation (tf) problem. Service is being recalled now...");
            }
            else if (segmentation_call.response.result == segmentation_call.response.SUCCESS)
            {//segmentation service called successfully go on with the feature extraction services
              ROS_INFO("Successful segmentation! Moving to feature extraction...");
              call_segmentation_srv = false;
            }
          }
          ros::spinOnce ();
        }

        //TODO: Onur -> cluster improvements/identification

        getReindexedClusters (segmentation_call.response.clusters, indexed_clusters);

        //        //publish relevant results
        //        publishClustersOneByOne (indexed_clusters.clusters);
        //        publishBoundingBoxes (indexed_clusters.clusters);
        //        publishTabletopDetectionResults (segmentation_call.response);

        publishClustersOneByOne (indexed_clusters);
        publishBoundingBoxes (indexed_clusters);
        publishTabletopDetectionResults (indexed_clusters, segmentation_call.response);

        //call feature extraction service
        //TODO: Asil -> feature extraction module interface
        //        extractAndVisFeatures(segmentation_call.response.clusters);
       
        
        featurize->extractAndVisualizeAll(indexed_clusters.clusters);

      }
    }
    else//module is deactivated
    {
      //Do things that are to be done when module is deactivated
    }

    ros::spinOnce ();
    r.sleep ();
  }

  return 0;
}
