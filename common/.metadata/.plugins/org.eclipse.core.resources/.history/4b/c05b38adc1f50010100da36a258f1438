//ros includes
#include <ros/ros.h>
#include <sensor_msgs/JointState.h>

//read led information from yarp network and update joint values

// yarp includes
#include <yarp/os/Network.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Bottle.h>
#include <yarp/os/BufferedPort.h>
#include <yarp/sig/Vector.h>
#include <yarp/math/Math.h>

// standard includes
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>

using namespace std;
using namespace yarp::os;
using namespace yarp::sig;
using namespace yarp::dev;
using namespace yarp::math;

typedef struct ledVector {
	ConstString channelName;
	Vector coordinates;

	ledVector() {
		coordinates.resize(3);
	}
} LEDVector;

LEDVector vectorList[3];

Vector getCoordinatesByChannelName(const char* channelOfInterest) {

	for (int i = 0; i < 3; i++)
		if (vectorList[i].channelName == channelOfInterest)
			return vectorList[i].coordinates;

	// could not find the vector. there is an error
	cerr << "Dude wtf" << endl;
	exit(-1);
}

// We are interested in camera's leds. They are channels 101, 103 and 104
void getCameraLedInfo(const Bottle *b) {

	int channelCount = b->get(0).asInt();

	int vectorIndex = 0;

	for (int i = 1; i < channelCount * 5; i = i + 5) {

		if (b->get(i).asString() == "Channel101" || b->get(i).asString()
				== "Channel103" || b->get(i).asString() == "Channel104") {

			vectorList[vectorIndex].channelName = b->get(i).asString();
			vectorList[vectorIndex].coordinates[0] = b->get(i + 1).asDouble();
			vectorList[vectorIndex].coordinates[1] = b->get(i + 2).asDouble();
			vectorList[vectorIndex].coordinates[2] = b->get(i + 3).asDouble();
			cout << vectorList[vectorIndex].channelName << " "
					<< vectorList[vectorIndex].coordinates[0] << " "
					<< vectorList[vectorIndex].coordinates[1] << " "
					<< vectorList[vectorIndex].coordinates[2] << endl;
			vectorIndex++;
		} else {
			cout << b->get(i).asString() << " " << b->get(i + 1).asDouble()
					<< " " << b->get(i + 2).asDouble() << " "
					<< b->get(i + 3).asDouble() << endl;
		}
	}
	//return vectorData;
}

void getTransformation(vector<double> &rpy,vector<double> &offset)
{
	Vector ch101 = getCoordinatesByChannelName("Channel101");
	Vector ch103 = getCoordinatesByChannelName("Channel103");
	Vector ch104 = getCoordinatesByChannelName("Channel104");

	Vector zS = ch101 - ch103;//getCoordinatesByChannelName("Channel101");
	Vector xz = ch104 - ch103;// getCoordinatesByChannelName("Channel104");

	Vector yS;

	yS = cross(zS,xz);

	for(int i = 0 ; i < 3; i++)
		offset[i] = ch103[i];

	Vector xS = cross(yS,zS);

	Matrix rot(3,3);
	Matrix translation(3,1);

	Vector xG(3); xG[0] = 1; xG[1] = 0; xG[2] = 0;
	Vector yG(3); yG[0] = 0; yG[1] = 1; yG[2] = 0;
	Vector zG(3); zG[0] = 0; zG[1] = 0; zG[2] = 1;

	Vector v(3);
	v[0] = dot(xS,xG); v[1] = dot(xS,yG); v[2] = dot(xS,zG);
	rot.setCol(0,v);

	v[0] = dot(yS,xG); v[1] = dot(yS,yG); v[2] = dot(yS,zG);
	rot.setCol(1,v);

	v[0] = dot(zS,xG); v[1] = dot(zS,yG); v[2] = dot(zS,zG);
	rot.setCol(2,v);

	//double* rpy = new double[3];



	rot = luinv(rot);
	for(int i = 0 ; i < 3; i++)
		offset[i] = -1*offset[i];

	rpy[0] = atan2(rot(2,1),rot(2,2)); // r
	rpy[2] = atan2(rot(1,0),rot(0,0)); // y
	rpy[1] = atan2(-rot(2,0),cos( rpy[2] ) *rot(0,0) + sin( rpy[2] )*rot(1,0) ); // p
//	return rpy;

}

//mocap data received callback

int main(int argc, char* argv[]) {

	//ros initializations
	ros::init(argc, argv, "test_setup_state_publisher");
	ros::NodeHandle n;
	ros::Publisher joint_state_publisher =
			n.advertise<sensor_msgs::JointState> ("joint_states", 1000);

	//yarp initializations
	Network::init();
	BufferedPort<Bottle> vzInPort;
	vzInPort.open("/i:vzListen");
	Network::connect("/vzPout","/i:vzListen");

	vector<LEDVector> vectors;
	int bottleSize;

	vector<double> rpy(3);
	vector<double> offset(3);

	ros::Rate loop_rate(15);
	sensor_msgs::JointState js;

	js.name.push_back(std::string("/swissranger_link"));
	js.position.resize(6);

	while (n.ok()) {

		js.header.frame_id = "/base_link";
		js.header.stamp = ros::Time::now();
		js.position[0] = 0;//x
		js.position[1] = 0;//y
		js.position[2] = 0;//z
		js.position[3] = 0;//r
		js.position[4] = 0;//p
		js.position[5] = 0;//y
		joint_state_publisher.publish(js);
		ros::spinOnce();
		loop_rate.sleep();
	}
}
