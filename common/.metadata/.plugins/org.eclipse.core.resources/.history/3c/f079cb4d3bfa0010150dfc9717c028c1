#include "iostream"
#include "sensor_msgs/PointCloud2.h"

#include "ros/ros.h"
#include "tabletop_object_detector/TabletopSegmentation.h"
#include "tabletop_collision_map_processing/TabletopCollisionMapProcessing.h"
#include <visualization_msgs/MarkerArray.h>

#include "pcl_ros/filters/statistical_outlier_removal.h"
#include "pcl_ros/filters/radius_outlier_removal.h"

#include "sensor_msgs/point_cloud_conversion.h"
#include <pcl/ros/conversions.h>

//aff_learning includes
#include "aff_msgs/WorkspaceDetection.h"

ros::NodeHandle nh;
visualization_msgs::MarkerArray bounding_boxes;
ros::Publisher marker_array_pub;
ros::Publisher pub_all_clusters;
std::vector<ros::Publisher> pubs_clusters;
pcl::RadiusOutlierRemoval<pcl::PointXYZ> outrem;
uint32_t shape;

void
publishBoundingBoxes (std::vector<sensor_msgs::PointCloud> clusters)
{
  uint n_clusters = clusters.size ();

  for (uint i = 0; i < n_clusters; i++)
  {
    std::cout << clusters[i].points.size () << std::endl;
  }

  //delete the boxes already being sent
  for (uint i = 0; i < bounding_boxes.markers.size (); i++)
    bounding_boxes.markers[i].action = visualization_msgs::Marker::DELETE;

  marker_array_pub.publish (bounding_boxes);

  bounding_boxes.markers.resize (n_clusters);

  for (uint i = 0; i < n_clusters; i++)
  {

    double min_x = 10.0;
    double max_x = -10.0;
    double min_y = 10.0;
    double max_y = -10.0;
    double min_z = 10.0;
    double max_z = -10.0;

    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
    cloud_ptr->width = clusters[i].points.size ();
    cloud_ptr->height = 1;

    cloud_ptr->points.resize (cloud_ptr->width * cloud_ptr->height);
    for (uint j = 0; j < cloud_ptr->points.size (); j++)
    {
      cloud_ptr->points[j].x = clusters[i].points[j].x;
      cloud_ptr->points[j].y = clusters[i].points[j].y;
      cloud_ptr->points[j].z = clusters[i].points[j].z;
    }
    outrem.setInputCloud (cloud_ptr);
    pcl::PointCloud<pcl::PointXYZ> cloud;
    outrem.filter (cloud);

    for (uint j = 0; j < cloud.points.size (); j++)
    {
      if (cloud.points[j].x < min_x)
        min_x = cloud.points[j].x;
      else if (cloud.points[j].x > max_x)
        max_x = cloud.points[j].x;

      if (cloud.points[j].y < min_y)
        min_y = cloud.points[j].y;
      else if (cloud.points[j].y > max_y)
        max_y = cloud.points[j].y;

      if (cloud.points[j].z < min_z)
        min_z = cloud.points[j].z;
      else if (cloud.points[j].z > max_z)
        max_z = cloud.points[j].z;
    }
    visualization_msgs::Marker marker;
    marker.header.frame_id = "/base_link";
    marker.header.stamp = ros::Time::now ();
    marker.ns = "bounding_boxes";
    marker.id = i;
    marker.type = shape;
    marker.action = visualization_msgs::Marker::ADD;
    marker.pose.position.x = (min_x + max_x) / 2;
    marker.pose.position.y = (min_y + max_y) / 2;
    marker.pose.position.z = (min_z + max_z) / 2;
    marker.scale.x = max_x - min_x;
    marker.scale.y = max_y - min_y;
    marker.scale.z = max_z - min_z;
    marker.pose.orientation.x = 0.0;
    marker.pose.orientation.y = 0.0;
    marker.pose.orientation.z = 0.0;
    marker.pose.orientation.w = 1.0;

    if (i == 0)
    {
      marker.color.r = 1.0f;
      marker.color.g = 0.0f;
      marker.color.b = 0.0f;
      marker.color.a = 0.5;
    }
    else if (i == 1)
    {
      marker.color.r = 0.0f;
      marker.color.g = 1.0f;
      marker.color.b = 0.0f;
      marker.color.a = 0.5;
    }
    else if (i == 2)
    {
      marker.color.r = 0.0f;
      marker.color.g = 0.0f;
      marker.color.b = 1.0f;
      marker.color.a = 0.5;
    }
    else
    {
      marker.color.r = ((float)(n_clusters - (i + 1))) / n_clusters;
      marker.color.g = ((float)(i + 1)) / n_clusters;
      marker.color.b = 0.5;
      marker.color.a = 0.5;
    }

    marker.lifetime = ros::Duration ();

    bounding_boxes.markers[i] = marker;
  }
  if (marker_array_pub.getNumSubscribers () > 0)
    marker_array_pub.publish (bounding_boxes);
}

void
publishAllClusters (const std::vector<sensor_msgs::PointCloud>& clusters)
{
  for (uint i = 0; i < clusters.size (); i++)
    if (pub_all_clusters.getNumSubscribers () > 0)
      pub_all_clusters.publish (clusters[i]);
}

void
publishClustersOneByOne (const std::vector<sensor_msgs::PointCloud>& clusters)
{
  if (clusters.size () != pubs_clusters.size ())
  {
    pubs_clusters.resize (clusters.size ());

    for (uint i = 0; i < pubs_clusters.size (); i++)
    {
      std::stringstream s;
      std::string cluster_name ("clusters_");
      s << i;
      cluster_name.append (s.str ());
      pubs_clusters[i] = ros::Publisher (nh.advertise<sensor_msgs::PointCloud> (cluster_name, 10));
    }
  }
  for (uint i = 0; i < pubs_clusters.size (); i++)
  {
    if (pubs_clusters[i].getNumSubscribers () > 0)
      pubs_clusters[i].publish (clusters[i]);
  }
}

void
activationCallback ()
{

}

void
publishTabletopDetectionResults (tabletop_object_detector::TabletopSegmentationResponseConstPtr response)
{

}

int
main (int argc, char** argv)
{
  ros::init (argc, argv, "workspace_detector");

  const std::string WORKSPACE_SEGMENTATION_SRV_NAME = "/tabletop_segmentation";

  ros::ServiceClient object_segmentation_srv =
      nh.serviceClient<tabletop_object_detector::TabletopSegmentation> (WORKSPACE_SEGMENTATION_SRV_NAME, true);

  //wait for detection client
  while (!ros::service::waitForService (WORKSPACE_SEGMENTATION_SRV_NAME, ros::Duration (2.0)) && nh.ok ())
  {
    ROS_INFO("Waiting for object detection service to come up");
  }

  tabletop_object_detector::TabletopSegmentation segmentation_call;

  marker_array_pub = nh.advertise<visualization_msgs::MarkerArray> ("bounding_boxes", 1);
  shape = visualization_msgs::Marker::CUBE;

  pub_all_clusters = nh.advertise<sensor_msgs::PointCloud2> ("tabletop_clusters", 10);

  // build the filter
  outrem.setRadiusSearch (0.05);
  outrem.setMinNeighborsInRadius (30);

  //	ros::Rate r(1);
  while (nh.ok ())
  {

    //call the tabletop detection
    ROS_INFO("Calling tabletop segmentator");

    if (!object_segmentation_srv.call (segmentation_call))
    {
      ROS_ERROR("Tabletop detection service failed");
      return -1;
    }
    if (segmentation_call.response.result != segmentation_call.response.SUCCESS)
    {
      ROS_ERROR("Tabletop detection returned error code %d",
          segmentation_call.response.result);
      return -1;
    }
    if (segmentation_call.response.clusters.empty ())
    {
      ROS_ERROR("The tabletop detector detected the table, but found no object clusters");
      //return -1;
      continue;
    }

    publishAllClusters (segmentation_call.response.clusters);
    publishClustersOneByOne (segmentation_call.response.clusters);
    publishBoundingBoxes (segmentation_call.response.clusters);

    ros::spinOnce ();
    //		r.sleep();
  }

  return 0;
}
