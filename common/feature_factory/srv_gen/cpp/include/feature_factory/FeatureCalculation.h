/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/metu-ros-pkg/stacks/aff_learning/common/feature_factory/srv/FeatureCalculation.srv */
#ifndef FEATURE_FACTORY_SERVICE_FEATURECALCULATION_H
#define FEATURE_FACTORY_SERVICE_FEATURECALCULATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/PointCloud2.h"

namespace feature_factory
{
template <class ContainerAllocator>
struct FeatureCalculationRequest_ {
  typedef FeatureCalculationRequest_<ContainerAllocator> Type;

  FeatureCalculationRequest_()
  : calc_amplitude(false)
  , calc_confidence(false)
  , calc_distance(false)
  , calc_normals_azi(false)
  , calc_normals_zen(false)
  {
  }

  FeatureCalculationRequest_(const ContainerAllocator& _alloc)
  : calc_amplitude(false)
  , calc_confidence(false)
  , calc_distance(false)
  , calc_normals_azi(false)
  , calc_normals_zen(false)
  {
  }

  typedef uint8_t _calc_amplitude_type;
  uint8_t calc_amplitude;

  typedef uint8_t _calc_confidence_type;
  uint8_t calc_confidence;

  typedef uint8_t _calc_distance_type;
  uint8_t calc_distance;

  typedef uint8_t _calc_normals_azi_type;
  uint8_t calc_normals_azi;

  typedef uint8_t _calc_normals_zen_type;
  uint8_t calc_normals_zen;


private:
  static const char* __s_getDataType_() { return "feature_factory/FeatureCalculationRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b8c57ae607be14b9e0810ec7ae9914ec"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d90c5348877c0b5a172d453461340109"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool calc_amplitude\n\
bool calc_confidence\n\
bool calc_distance\n\
bool calc_normals_azi\n\
bool calc_normals_zen\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, calc_amplitude);
    ros::serialization::serialize(stream, calc_confidence);
    ros::serialization::serialize(stream, calc_distance);
    ros::serialization::serialize(stream, calc_normals_azi);
    ros::serialization::serialize(stream, calc_normals_zen);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, calc_amplitude);
    ros::serialization::deserialize(stream, calc_confidence);
    ros::serialization::deserialize(stream, calc_distance);
    ros::serialization::deserialize(stream, calc_normals_azi);
    ros::serialization::deserialize(stream, calc_normals_zen);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(calc_amplitude);
    size += ros::serialization::serializationLength(calc_confidence);
    size += ros::serialization::serializationLength(calc_distance);
    size += ros::serialization::serializationLength(calc_normals_azi);
    size += ros::serialization::serializationLength(calc_normals_zen);
    return size;
  }

  typedef boost::shared_ptr< ::feature_factory::FeatureCalculationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::feature_factory::FeatureCalculationRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FeatureCalculationRequest
typedef  ::feature_factory::FeatureCalculationRequest_<std::allocator<void> > FeatureCalculationRequest;

typedef boost::shared_ptr< ::feature_factory::FeatureCalculationRequest> FeatureCalculationRequestPtr;
typedef boost::shared_ptr< ::feature_factory::FeatureCalculationRequest const> FeatureCalculationRequestConstPtr;


template <class ContainerAllocator>
struct FeatureCalculationResponse_ {
  typedef FeatureCalculationResponse_<ContainerAllocator> Type;

  FeatureCalculationResponse_()
  : f_distances()
  , f_confidences()
  , f_amplitudes()
  , f_normals_azi()
  , f_normals_zen()
  {
  }

  FeatureCalculationResponse_(const ContainerAllocator& _alloc)
  : f_distances(_alloc)
  , f_confidences(_alloc)
  , f_amplitudes(_alloc)
  , f_normals_azi(_alloc)
  , f_normals_zen(_alloc)
  {
  }

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _f_distances_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  f_distances;

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _f_confidences_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  f_confidences;

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _f_amplitudes_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  f_amplitudes;

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _f_normals_azi_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  f_normals_azi;

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _f_normals_zen_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  f_normals_zen;


private:
  static const char* __s_getDataType_() { return "feature_factory/FeatureCalculationResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f24ae207f2df8c90f50cdb3329739f1d"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d90c5348877c0b5a172d453461340109"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "sensor_msgs/PointCloud2 f_distances\n\
sensor_msgs/PointCloud2 f_confidences\n\
sensor_msgs/PointCloud2 f_amplitudes\n\
sensor_msgs/PointCloud2 f_normals_azi\n\
sensor_msgs/PointCloud2 f_normals_zen\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, f_distances);
    ros::serialization::serialize(stream, f_confidences);
    ros::serialization::serialize(stream, f_amplitudes);
    ros::serialization::serialize(stream, f_normals_azi);
    ros::serialization::serialize(stream, f_normals_zen);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, f_distances);
    ros::serialization::deserialize(stream, f_confidences);
    ros::serialization::deserialize(stream, f_amplitudes);
    ros::serialization::deserialize(stream, f_normals_azi);
    ros::serialization::deserialize(stream, f_normals_zen);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(f_distances);
    size += ros::serialization::serializationLength(f_confidences);
    size += ros::serialization::serializationLength(f_amplitudes);
    size += ros::serialization::serializationLength(f_normals_azi);
    size += ros::serialization::serializationLength(f_normals_zen);
    return size;
  }

  typedef boost::shared_ptr< ::feature_factory::FeatureCalculationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::feature_factory::FeatureCalculationResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FeatureCalculationResponse
typedef  ::feature_factory::FeatureCalculationResponse_<std::allocator<void> > FeatureCalculationResponse;

typedef boost::shared_ptr< ::feature_factory::FeatureCalculationResponse> FeatureCalculationResponsePtr;
typedef boost::shared_ptr< ::feature_factory::FeatureCalculationResponse const> FeatureCalculationResponseConstPtr;

struct FeatureCalculation
{

typedef FeatureCalculationRequest Request;
typedef FeatureCalculationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FeatureCalculation
} // namespace feature_factory

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::feature_factory::FeatureCalculationRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::feature_factory::FeatureCalculationRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::feature_factory::FeatureCalculationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b8c57ae607be14b9e0810ec7ae9914ec";
  }

  static const char* value(const  ::feature_factory::FeatureCalculationRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb8c57ae607be14b9ULL;
  static const uint64_t static_value2 = 0xe0810ec7ae9914ecULL;
};

template<class ContainerAllocator>
struct DataType< ::feature_factory::FeatureCalculationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "feature_factory/FeatureCalculationRequest";
  }

  static const char* value(const  ::feature_factory::FeatureCalculationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::feature_factory::FeatureCalculationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool calc_amplitude\n\
bool calc_confidence\n\
bool calc_distance\n\
bool calc_normals_azi\n\
bool calc_normals_zen\n\
\n\
";
  }

  static const char* value(const  ::feature_factory::FeatureCalculationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::feature_factory::FeatureCalculationRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::feature_factory::FeatureCalculationResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::feature_factory::FeatureCalculationResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::feature_factory::FeatureCalculationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f24ae207f2df8c90f50cdb3329739f1d";
  }

  static const char* value(const  ::feature_factory::FeatureCalculationResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf24ae207f2df8c90ULL;
  static const uint64_t static_value2 = 0xf50cdb3329739f1dULL;
};

template<class ContainerAllocator>
struct DataType< ::feature_factory::FeatureCalculationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "feature_factory/FeatureCalculationResponse";
  }

  static const char* value(const  ::feature_factory::FeatureCalculationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::feature_factory::FeatureCalculationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/PointCloud2 f_distances\n\
sensor_msgs/PointCloud2 f_confidences\n\
sensor_msgs/PointCloud2 f_amplitudes\n\
sensor_msgs/PointCloud2 f_normals_azi\n\
sensor_msgs/PointCloud2 f_normals_zen\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
";
  }

  static const char* value(const  ::feature_factory::FeatureCalculationResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::feature_factory::FeatureCalculationRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.calc_amplitude);
    stream.next(m.calc_confidence);
    stream.next(m.calc_distance);
    stream.next(m.calc_normals_azi);
    stream.next(m.calc_normals_zen);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FeatureCalculationRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::feature_factory::FeatureCalculationResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.f_distances);
    stream.next(m.f_confidences);
    stream.next(m.f_amplitudes);
    stream.next(m.f_normals_azi);
    stream.next(m.f_normals_zen);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FeatureCalculationResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<feature_factory::FeatureCalculation> {
  static const char* value() 
  {
    return "d90c5348877c0b5a172d453461340109";
  }

  static const char* value(const feature_factory::FeatureCalculation&) { return value(); } 
};

template<>
struct DataType<feature_factory::FeatureCalculation> {
  static const char* value() 
  {
    return "feature_factory/FeatureCalculation";
  }

  static const char* value(const feature_factory::FeatureCalculation&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<feature_factory::FeatureCalculationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d90c5348877c0b5a172d453461340109";
  }

  static const char* value(const feature_factory::FeatureCalculationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<feature_factory::FeatureCalculationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "feature_factory/FeatureCalculation";
  }

  static const char* value(const feature_factory::FeatureCalculationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<feature_factory::FeatureCalculationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d90c5348877c0b5a172d453461340109";
  }

  static const char* value(const feature_factory::FeatureCalculationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<feature_factory::FeatureCalculationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "feature_factory/FeatureCalculation";
  }

  static const char* value(const feature_factory::FeatureCalculationResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FEATURE_FACTORY_SERVICE_FEATURECALCULATION_H

