/* Auto-generated by genmsg_cpp for file /home/asil/rossi_workspace/metu-ros-pkg/stacks/aff_learning/common/aff_msgs/msg/ExperimentState.msg */
#ifndef AFF_MSGS_MESSAGE_EXPERIMENTSTATE_H
#define AFF_MSGS_MESSAGE_EXPERIMENTSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace aff_msgs
{
template <class ContainerAllocator>
struct ExperimentState_ {
  typedef ExperimentState_<ContainerAllocator> Type;

  ExperimentState_()
  : experiment_state(0)
  {
  }

  ExperimentState_(const ContainerAllocator& _alloc)
  : experiment_state(0)
  {
  }

  typedef uint8_t _experiment_state_type;
  uint8_t experiment_state;

  enum { ASK_FOR_ACTION = 0 };
  enum { VERIFY_ACTION = 1 };
  enum { PERCEPTION = 2 };
  enum { WAIT_FOR_CLEAR_SCENE = 3 };
  enum { ACTION = 4 };
  enum { ASK_FOR_EFFECT = 5 };
  enum { EFFECT = 6 };
  enum { STANDBY = 7 };
  enum { LET_HUMAN_ACT = 8 };

private:
  static const char* __s_getDataType_() { return "aff_msgs/ExperimentState"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6cc6165af84dbedcd2e4cc0a760f8618"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8 ASK_FOR_ACTION = 0 # now what?\n\
uint8 VERIFY_ACTION = 1 #I'm doing \"this action\"\n\
uint8 PERCEPTION = 2\n\
uint8 WAIT_FOR_CLEAR_SCENE = 3 # I'm waiting for a clear scene\n\
uint8 ACTION = 4\n\
uint8 ASK_FOR_EFFECT =5 #What has just happened ?\n\
uint8 EFFECT = 6\n\
uint8 STANDBY = 7\n\
uint8 LET_HUMAN_ACT = 8 #human acts on the environment, external motion\n\
\n\
uint8 experiment_state\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, experiment_state);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, experiment_state);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(experiment_state);
    return size;
  }

  typedef boost::shared_ptr< ::aff_msgs::ExperimentState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aff_msgs::ExperimentState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ExperimentState
typedef  ::aff_msgs::ExperimentState_<std::allocator<void> > ExperimentState;

typedef boost::shared_ptr< ::aff_msgs::ExperimentState> ExperimentStatePtr;
typedef boost::shared_ptr< ::aff_msgs::ExperimentState const> ExperimentStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::aff_msgs::ExperimentState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::aff_msgs::ExperimentState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace aff_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aff_msgs::ExperimentState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aff_msgs::ExperimentState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aff_msgs::ExperimentState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6cc6165af84dbedcd2e4cc0a760f8618";
  }

  static const char* value(const  ::aff_msgs::ExperimentState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6cc6165af84dbedcULL;
  static const uint64_t static_value2 = 0xd2e4cc0a760f8618ULL;
};

template<class ContainerAllocator>
struct DataType< ::aff_msgs::ExperimentState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aff_msgs/ExperimentState";
  }

  static const char* value(const  ::aff_msgs::ExperimentState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aff_msgs::ExperimentState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 ASK_FOR_ACTION = 0 # now what?\n\
uint8 VERIFY_ACTION = 1 #I'm doing \"this action\"\n\
uint8 PERCEPTION = 2\n\
uint8 WAIT_FOR_CLEAR_SCENE = 3 # I'm waiting for a clear scene\n\
uint8 ACTION = 4\n\
uint8 ASK_FOR_EFFECT =5 #What has just happened ?\n\
uint8 EFFECT = 6\n\
uint8 STANDBY = 7\n\
uint8 LET_HUMAN_ACT = 8 #human acts on the environment, external motion\n\
\n\
uint8 experiment_state\n\
\n\
";
  }

  static const char* value(const  ::aff_msgs::ExperimentState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::aff_msgs::ExperimentState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aff_msgs::ExperimentState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.experiment_state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ExperimentState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aff_msgs::ExperimentState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::aff_msgs::ExperimentState_<ContainerAllocator> & v) 
  {
    s << indent << "experiment_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.experiment_state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AFF_MSGS_MESSAGE_EXPERIMENTSTATE_H

