/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/metu-ros-pkg/stacks/aff_learning/common/aff_msgs/msg/ModuleStates.msg */
#ifndef AFF_MSGS_MESSAGE_MODULESTATES_H
#define AFF_MSGS_MESSAGE_MODULESTATES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace aff_msgs
{
template <class ContainerAllocator>
struct ModuleStates_ {
  typedef ModuleStates_<ContainerAllocator> Type;

  ModuleStates_()
  : workspace_detector(false)
  , behavior_manager(false)
  {
  }

  ModuleStates_(const ContainerAllocator& _alloc)
  : workspace_detector(false)
  , behavior_manager(false)
  {
  }

  typedef uint8_t _workspace_detector_type;
  uint8_t workspace_detector;

  typedef uint8_t _behavior_manager_type;
  uint8_t behavior_manager;


private:
  static const char* __s_getDataType_() { return "aff_msgs/ModuleStates"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "5db198112592b255720236133b837d16"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# This message is sent to all of the nodes to synchronize sensori-data acquisition,\n\
# action, observation and teleoperation stuff.\n\
\n\
bool workspace_detector\n\
bool behavior_manager\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, workspace_detector);
    ros::serialization::serialize(stream, behavior_manager);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, workspace_detector);
    ros::serialization::deserialize(stream, behavior_manager);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(workspace_detector);
    size += ros::serialization::serializationLength(behavior_manager);
    return size;
  }

  typedef boost::shared_ptr< ::aff_msgs::ModuleStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aff_msgs::ModuleStates_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ModuleStates
typedef  ::aff_msgs::ModuleStates_<std::allocator<void> > ModuleStates;

typedef boost::shared_ptr< ::aff_msgs::ModuleStates> ModuleStatesPtr;
typedef boost::shared_ptr< ::aff_msgs::ModuleStates const> ModuleStatesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::aff_msgs::ModuleStates_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::aff_msgs::ModuleStates_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace aff_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aff_msgs::ModuleStates_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aff_msgs::ModuleStates_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aff_msgs::ModuleStates_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5db198112592b255720236133b837d16";
  }

  static const char* value(const  ::aff_msgs::ModuleStates_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5db198112592b255ULL;
  static const uint64_t static_value2 = 0x720236133b837d16ULL;
};

template<class ContainerAllocator>
struct DataType< ::aff_msgs::ModuleStates_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aff_msgs/ModuleStates";
  }

  static const char* value(const  ::aff_msgs::ModuleStates_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aff_msgs::ModuleStates_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message is sent to all of the nodes to synchronize sensori-data acquisition,\n\
# action, observation and teleoperation stuff.\n\
\n\
bool workspace_detector\n\
bool behavior_manager\n\
\n\
";
  }

  static const char* value(const  ::aff_msgs::ModuleStates_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::aff_msgs::ModuleStates_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aff_msgs::ModuleStates_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.workspace_detector);
    stream.next(m.behavior_manager);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ModuleStates_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aff_msgs::ModuleStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::aff_msgs::ModuleStates_<ContainerAllocator> & v) 
  {
    s << indent << "workspace_detector: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.workspace_detector);
    s << indent << "behavior_manager: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.behavior_manager);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AFF_MSGS_MESSAGE_MODULESTATES_H

