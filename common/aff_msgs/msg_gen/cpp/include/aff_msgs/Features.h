/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/metu-ros-pkg/stacks/aff_learning/common/aff_msgs/msg/Features.msg */
#ifndef AFF_MSGS_MESSAGE_FEATURES_H
#define AFF_MSGS_MESSAGE_FEATURES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace aff_msgs
{
template <class ContainerAllocator>
struct Features_ {
  typedef Features_<ContainerAllocator> Type;

  Features_()
  : feature_type(0)
  , feature_class(0)
  , features()
  , episode_index(0)
  {
  }

  Features_(const ContainerAllocator& _alloc)
  : feature_type(0)
  , feature_class(0)
  , features(_alloc)
  , episode_index(0)
  {
  }

  typedef int8_t _feature_type_type;
  int8_t feature_type;

  typedef int8_t _feature_class_type;
  int8_t feature_class;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _features_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  features;

  typedef int32_t _episode_index_type;
  int32_t episode_index;

  enum { ENTITY = 0 };
  enum { EFFECT = 1 };

  ROS_DEPRECATED uint32_t get_features_size() const { return (uint32_t)features.size(); }
  ROS_DEPRECATED void set_features_size(uint32_t size) { features.resize((size_t)size); }
  ROS_DEPRECATED void get_features_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->features; }
  ROS_DEPRECATED void set_features_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->features = vec; }
private:
  static const char* __s_getDataType_() { return "aff_msgs/Features"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "54b87ae43f21551d16ac92ead68b044d"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 ENTITY=0\n\
int8 EFFECT=1\n\
int8 feature_type\n\
int8 feature_class #insert supervised feature class if applicable\n\
float32[] features\n\
int32 episode_index\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, feature_type);
    ros::serialization::serialize(stream, feature_class);
    ros::serialization::serialize(stream, features);
    ros::serialization::serialize(stream, episode_index);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, feature_type);
    ros::serialization::deserialize(stream, feature_class);
    ros::serialization::deserialize(stream, features);
    ros::serialization::deserialize(stream, episode_index);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(feature_type);
    size += ros::serialization::serializationLength(feature_class);
    size += ros::serialization::serializationLength(features);
    size += ros::serialization::serializationLength(episode_index);
    return size;
  }

  typedef boost::shared_ptr< ::aff_msgs::Features_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aff_msgs::Features_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Features
typedef  ::aff_msgs::Features_<std::allocator<void> > Features;

typedef boost::shared_ptr< ::aff_msgs::Features> FeaturesPtr;
typedef boost::shared_ptr< ::aff_msgs::Features const> FeaturesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::aff_msgs::Features_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::aff_msgs::Features_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace aff_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aff_msgs::Features_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aff_msgs::Features_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aff_msgs::Features_<ContainerAllocator> > {
  static const char* value() 
  {
    return "54b87ae43f21551d16ac92ead68b044d";
  }

  static const char* value(const  ::aff_msgs::Features_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x54b87ae43f21551dULL;
  static const uint64_t static_value2 = 0x16ac92ead68b044dULL;
};

template<class ContainerAllocator>
struct DataType< ::aff_msgs::Features_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aff_msgs/Features";
  }

  static const char* value(const  ::aff_msgs::Features_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aff_msgs::Features_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 ENTITY=0\n\
int8 EFFECT=1\n\
int8 feature_type\n\
int8 feature_class #insert supervised feature class if applicable\n\
float32[] features\n\
int32 episode_index\n\
\n\
";
  }

  static const char* value(const  ::aff_msgs::Features_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aff_msgs::Features_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.feature_type);
    stream.next(m.feature_class);
    stream.next(m.features);
    stream.next(m.episode_index);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Features_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aff_msgs::Features_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::aff_msgs::Features_<ContainerAllocator> & v) 
  {
    s << indent << "feature_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.feature_type);
    s << indent << "feature_class: ";
    Printer<int8_t>::stream(s, indent + "  ", v.feature_class);
    s << indent << "features[]" << std::endl;
    for (size_t i = 0; i < v.features.size(); ++i)
    {
      s << indent << "  features[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.features[i]);
    }
    s << indent << "episode_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.episode_index);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AFF_MSGS_MESSAGE_FEATURES_H

