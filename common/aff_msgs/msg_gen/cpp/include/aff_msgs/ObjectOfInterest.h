/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/metu-ros-pkg/stacks/aff_learning/common/aff_msgs/msg/ObjectOfInterest.msg */
#ifndef AFF_MSGS_MESSAGE_OBJECTOFINTEREST_H
#define AFF_MSGS_MESSAGE_OBJECTOFINTEREST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace aff_msgs
{
template <class ContainerAllocator>
struct ObjectOfInterest_ {
  typedef ObjectOfInterest_<ContainerAllocator> Type;

  ObjectOfInterest_()
  : object_center()
  , object_size()
  , affordances()
  {
  }

  ObjectOfInterest_(const ContainerAllocator& _alloc)
  : object_center(_alloc)
  , object_size(_alloc)
  , affordances(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _object_center_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  object_center;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _object_size_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  object_size;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _affordances_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  affordances;


  ROS_DEPRECATED uint32_t get_object_center_size() const { return (uint32_t)object_center.size(); }
  ROS_DEPRECATED void set_object_center_size(uint32_t size) { object_center.resize((size_t)size); }
  ROS_DEPRECATED void get_object_center_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->object_center; }
  ROS_DEPRECATED void set_object_center_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->object_center = vec; }
  ROS_DEPRECATED uint32_t get_object_size_size() const { return (uint32_t)object_size.size(); }
  ROS_DEPRECATED void set_object_size_size(uint32_t size) { object_size.resize((size_t)size); }
  ROS_DEPRECATED void get_object_size_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->object_size; }
  ROS_DEPRECATED void set_object_size_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->object_size = vec; }
  ROS_DEPRECATED uint32_t get_affordances_size() const { return (uint32_t)affordances.size(); }
  ROS_DEPRECATED void set_affordances_size(uint32_t size) { affordances.resize((size_t)size); }
  ROS_DEPRECATED void get_affordances_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->affordances; }
  ROS_DEPRECATED void set_affordances_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->affordances = vec; }
private:
  static const char* __s_getDataType_() { return "aff_msgs/ObjectOfInterest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "a29efac146671dfe2b7bc551235b000c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32[] object_center\n\
float32[] object_size\n\
string[] affordances\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, object_center);
    ros::serialization::serialize(stream, object_size);
    ros::serialization::serialize(stream, affordances);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, object_center);
    ros::serialization::deserialize(stream, object_size);
    ros::serialization::deserialize(stream, affordances);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(object_center);
    size += ros::serialization::serializationLength(object_size);
    size += ros::serialization::serializationLength(affordances);
    return size;
  }

  typedef boost::shared_ptr< ::aff_msgs::ObjectOfInterest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aff_msgs::ObjectOfInterest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ObjectOfInterest
typedef  ::aff_msgs::ObjectOfInterest_<std::allocator<void> > ObjectOfInterest;

typedef boost::shared_ptr< ::aff_msgs::ObjectOfInterest> ObjectOfInterestPtr;
typedef boost::shared_ptr< ::aff_msgs::ObjectOfInterest const> ObjectOfInterestConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::aff_msgs::ObjectOfInterest_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::aff_msgs::ObjectOfInterest_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace aff_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aff_msgs::ObjectOfInterest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aff_msgs::ObjectOfInterest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aff_msgs::ObjectOfInterest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a29efac146671dfe2b7bc551235b000c";
  }

  static const char* value(const  ::aff_msgs::ObjectOfInterest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa29efac146671dfeULL;
  static const uint64_t static_value2 = 0x2b7bc551235b000cULL;
};

template<class ContainerAllocator>
struct DataType< ::aff_msgs::ObjectOfInterest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aff_msgs/ObjectOfInterest";
  }

  static const char* value(const  ::aff_msgs::ObjectOfInterest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aff_msgs::ObjectOfInterest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] object_center\n\
float32[] object_size\n\
string[] affordances\n\
\n\
";
  }

  static const char* value(const  ::aff_msgs::ObjectOfInterest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aff_msgs::ObjectOfInterest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.object_center);
    stream.next(m.object_size);
    stream.next(m.affordances);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ObjectOfInterest_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aff_msgs::ObjectOfInterest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::aff_msgs::ObjectOfInterest_<ContainerAllocator> & v) 
  {
    s << indent << "object_center[]" << std::endl;
    for (size_t i = 0; i < v.object_center.size(); ++i)
    {
      s << indent << "  object_center[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.object_center[i]);
    }
    s << indent << "object_size[]" << std::endl;
    for (size_t i = 0; i < v.object_size.size(); ++i)
    {
      s << indent << "  object_size[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.object_size[i]);
    }
    s << indent << "affordances[]" << std::endl;
    for (size_t i = 0; i < v.affordances.size(); ++i)
    {
      s << indent << "  affordances[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.affordances[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AFF_MSGS_MESSAGE_OBJECTOFINTEREST_H

