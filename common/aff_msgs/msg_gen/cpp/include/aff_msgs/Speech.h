/* Auto-generated by genmsg_cpp for file /home/kadir/interconnection/workspace/metu-ros-pkg/stacks/aff_learning/common/aff_msgs/msg/Speech.msg */
#ifndef AFF_MSGS_MESSAGE_SPEECH_H
#define AFF_MSGS_MESSAGE_SPEECH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace aff_msgs
{
template <class ContainerAllocator>
struct Speech_ {
  typedef Speech_<ContainerAllocator> Type;

  Speech_()
  : speech_cmd(0)
  , speech_arg(0)
  {
  }

  Speech_(const ContainerAllocator& _alloc)
  : speech_cmd(0)
  , speech_arg(0)
  {
  }

  typedef int8_t _speech_cmd_type;
  int8_t speech_cmd;

  typedef int8_t _speech_arg_type;
  int8_t speech_arg;

  enum { MAX_ACTION_INDEX = 19 };
  enum { MAX_EFFECT_INDEX = 39 };
  enum { PUSH_RIGHT = 0 };
  enum { PUSH_LEFT = 1 };
  enum { PUSH_FORWARD = 2 };
  enum { PUSH_BACKWARD = 3 };
  enum { LIFT = 4 };
  enum { GRASP = 5 };
  enum { HOME = 6 };
  enum { POINT = 7 };
  enum { HIDE = 8 };
  enum { CANCEL = 9 };
  enum { STOP = 10 };
  enum { SHOW = 11 };
  enum { TUCK_ARMS = 12 };
  enum { LOOK_AT_REGION = 13 };
  enum { LOOK_AT_POINT = 14 };
  enum { LOOK_AT_FACE = 15 };
  enum { REACH = 16 };
  enum { TAKE = 17 };
  enum { GIVE = 18 };
  enum { RELEASE = 19 };
  enum { PUSHED_RIGHT = 20 };
  enum { PUSHED_LEFT = 21 };
  enum { PUSHED_FORWARD = 22 };
  enum { PUSHED_BACKWARD = 23 };
  enum { ROLLED_RIGHT = 24 };
  enum { ROLLED_LEFT = 25 };
  enum { ROLLED_FORWARD = 26 };
  enum { LIFTED = 27 };
  enum { DISAPPEARED = 28 };
  enum { NO_EFFECT = 29 };
  enum { GRASPED = 30 };
  enum { DONTCARE = 31 };
  enum { NO_CHANGE = 32 };
  enum { REACHED = 33 };
  enum { ACQUIRED = 34 };
  enum { RELEASED = 35 };
  enum { TAKEN = 36 };
  enum { GIVEN = 37 };
  enum { CONTINUE = 38 };

private:
  static const char* __s_getDataType_() { return "aff_msgs/Speech"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "599975281b07156156eaaae710a35947"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 MAX_ACTION_INDEX = 19\n\
int8 MAX_EFFECT_INDEX = 39\n\
int8 PUSH_RIGHT = 0\n\
int8 PUSH_LEFT =1\n\
int8 PUSH_FORWARD =2\n\
int8 PUSH_BACKWARD=3\n\
int8 LIFT=4\n\
int8 GRASP=5\n\
int8 HOME=6\n\
int8 POINT=7\n\
int8 HIDE=8\n\
int8 CANCEL=9\n\
int8 STOP=10\n\
int8 SHOW=11\n\
int8 TUCK_ARMS=12\n\
int8 LOOK_AT_REGION=13\n\
int8 LOOK_AT_POINT=14\n\
int8 LOOK_AT_FACE=15\n\
int8 REACH=16\n\
int8 TAKE=17\n\
int8 GIVE=18\n\
int8 RELEASE=19\n\
int8 PUSHED_RIGHT=20\n\
int8 PUSHED_LEFT=21\n\
int8 PUSHED_FORWARD=22\n\
int8 PUSHED_BACKWARD=23\n\
int8 ROLLED_RIGHT=24\n\
int8 ROLLED_LEFT=25\n\
int8 ROLLED_FORWARD=26\n\
int8 LIFTED=27\n\
int8 DISAPPEARED=28\n\
int8 NO_EFFECT=29\n\
int8 GRASPED=30\n\
int8 DONTCARE=31\n\
int8 NO_CHANGE=32\n\
int8 REACHED=33\n\
int8 ACQUIRED=34\n\
int8 RELEASED=35\n\
int8 TAKEN=36\n\
int8 GIVEN=37\n\
int8 CONTINUE=38\n\
\n\
int8 speech_cmd\n\
int8 speech_arg\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, speech_cmd);
    ros::serialization::serialize(stream, speech_arg);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, speech_cmd);
    ros::serialization::deserialize(stream, speech_arg);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(speech_cmd);
    size += ros::serialization::serializationLength(speech_arg);
    return size;
  }

  typedef boost::shared_ptr< ::aff_msgs::Speech_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aff_msgs::Speech_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Speech
typedef  ::aff_msgs::Speech_<std::allocator<void> > Speech;

typedef boost::shared_ptr< ::aff_msgs::Speech> SpeechPtr;
typedef boost::shared_ptr< ::aff_msgs::Speech const> SpeechConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::aff_msgs::Speech_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::aff_msgs::Speech_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace aff_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aff_msgs::Speech_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aff_msgs::Speech_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aff_msgs::Speech_<ContainerAllocator> > {
  static const char* value() 
  {
    return "599975281b07156156eaaae710a35947";
  }

  static const char* value(const  ::aff_msgs::Speech_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x599975281b071561ULL;
  static const uint64_t static_value2 = 0x56eaaae710a35947ULL;
};

template<class ContainerAllocator>
struct DataType< ::aff_msgs::Speech_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aff_msgs/Speech";
  }

  static const char* value(const  ::aff_msgs::Speech_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aff_msgs::Speech_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 MAX_ACTION_INDEX = 19\n\
int8 MAX_EFFECT_INDEX = 39\n\
int8 PUSH_RIGHT = 0\n\
int8 PUSH_LEFT =1\n\
int8 PUSH_FORWARD =2\n\
int8 PUSH_BACKWARD=3\n\
int8 LIFT=4\n\
int8 GRASP=5\n\
int8 HOME=6\n\
int8 POINT=7\n\
int8 HIDE=8\n\
int8 CANCEL=9\n\
int8 STOP=10\n\
int8 SHOW=11\n\
int8 TUCK_ARMS=12\n\
int8 LOOK_AT_REGION=13\n\
int8 LOOK_AT_POINT=14\n\
int8 LOOK_AT_FACE=15\n\
int8 REACH=16\n\
int8 TAKE=17\n\
int8 GIVE=18\n\
int8 RELEASE=19\n\
int8 PUSHED_RIGHT=20\n\
int8 PUSHED_LEFT=21\n\
int8 PUSHED_FORWARD=22\n\
int8 PUSHED_BACKWARD=23\n\
int8 ROLLED_RIGHT=24\n\
int8 ROLLED_LEFT=25\n\
int8 ROLLED_FORWARD=26\n\
int8 LIFTED=27\n\
int8 DISAPPEARED=28\n\
int8 NO_EFFECT=29\n\
int8 GRASPED=30\n\
int8 DONTCARE=31\n\
int8 NO_CHANGE=32\n\
int8 REACHED=33\n\
int8 ACQUIRED=34\n\
int8 RELEASED=35\n\
int8 TAKEN=36\n\
int8 GIVEN=37\n\
int8 CONTINUE=38\n\
\n\
int8 speech_cmd\n\
int8 speech_arg\n\
\n\
";
  }

  static const char* value(const  ::aff_msgs::Speech_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::aff_msgs::Speech_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aff_msgs::Speech_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.speech_cmd);
    stream.next(m.speech_arg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Speech_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aff_msgs::Speech_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::aff_msgs::Speech_<ContainerAllocator> & v) 
  {
    s << indent << "speech_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speech_cmd);
    s << indent << "speech_arg: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speech_arg);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AFF_MSGS_MESSAGE_SPEECH_H

