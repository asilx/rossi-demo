"""autogenerated by genmsg_py from Features.msg. Do not edit."""
import roslib.message
import struct


class Features(roslib.message.Message):
  _md5sum = "54b87ae43f21551d16ac92ead68b044d"
  _type = "aff_msgs/Features"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 ENTITY=0
int8 EFFECT=1
int8 feature_type
int8 feature_class #insert supervised feature class if applicable
float32[] features
int32 episode_index

"""
  # Pseudo-constants
  ENTITY = 0
  EFFECT = 1

  __slots__ = ['feature_type','feature_class','features','episode_index']
  _slot_types = ['int8','int8','float32[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       feature_type,feature_class,features,episode_index
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Features, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.feature_type is None:
        self.feature_type = 0
      if self.feature_class is None:
        self.feature_class = 0
      if self.features is None:
        self.features = []
      if self.episode_index is None:
        self.episode_index = 0
    else:
      self.feature_type = 0
      self.feature_class = 0
      self.features = []
      self.episode_index = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2b.pack(_x.feature_type, _x.feature_class))
      length = len(self.features)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.features))
      buff.write(_struct_i.pack(self.episode_index))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.feature_type, _x.feature_class,) = _struct_2b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.features = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.episode_index,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2b.pack(_x.feature_type, _x.feature_class))
      length = len(self.features)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.features.tostring())
      buff.write(_struct_i.pack(self.episode_index))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.feature_type, _x.feature_class,) = _struct_2b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.features = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.episode_index,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i = struct.Struct("<i")
_struct_2b = struct.Struct("<2b")
