"""autogenerated by genmsg_py from ExperimentState.msg. Do not edit."""
import roslib.message
import struct


class ExperimentState(roslib.message.Message):
  _md5sum = "6cc6165af84dbedcd2e4cc0a760f8618"
  _type = "aff_msgs/ExperimentState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 ASK_FOR_ACTION = 0 # now what?
uint8 VERIFY_ACTION = 1 #I'm doing "this action"
uint8 PERCEPTION = 2
uint8 WAIT_FOR_CLEAR_SCENE = 3 # I'm waiting for a clear scene
uint8 ACTION = 4
uint8 ASK_FOR_EFFECT =5 #What has just happened ?
uint8 EFFECT = 6
uint8 STANDBY = 7
uint8 LET_HUMAN_ACT = 8 #human acts on the environment, external motion

uint8 experiment_state

"""
  # Pseudo-constants
  ASK_FOR_ACTION = 0
  VERIFY_ACTION = 1
  PERCEPTION = 2
  WAIT_FOR_CLEAR_SCENE = 3
  ACTION = 4
  ASK_FOR_EFFECT = 5
  EFFECT = 6
  STANDBY = 7
  LET_HUMAN_ACT = 8

  __slots__ = ['experiment_state']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       experiment_state
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ExperimentState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.experiment_state is None:
        self.experiment_state = 0
    else:
      self.experiment_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.experiment_state))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.experiment_state,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.experiment_state))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.experiment_state,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
