"""autogenerated by genmsg_py from Speech.msg. Do not edit."""
import roslib.message
import struct


class Speech(roslib.message.Message):
  _md5sum = "599975281b07156156eaaae710a35947"
  _type = "aff_msgs/Speech"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 MAX_ACTION_INDEX = 19
int8 MAX_EFFECT_INDEX = 39
int8 PUSH_RIGHT = 0
int8 PUSH_LEFT =1
int8 PUSH_FORWARD =2
int8 PUSH_BACKWARD=3
int8 LIFT=4
int8 GRASP=5
int8 HOME=6
int8 POINT=7
int8 HIDE=8
int8 CANCEL=9
int8 STOP=10
int8 SHOW=11
int8 TUCK_ARMS=12
int8 LOOK_AT_REGION=13
int8 LOOK_AT_POINT=14
int8 LOOK_AT_FACE=15
int8 REACH=16
int8 TAKE=17
int8 GIVE=18
int8 RELEASE=19
int8 PUSHED_RIGHT=20
int8 PUSHED_LEFT=21
int8 PUSHED_FORWARD=22
int8 PUSHED_BACKWARD=23
int8 ROLLED_RIGHT=24
int8 ROLLED_LEFT=25
int8 ROLLED_FORWARD=26
int8 LIFTED=27
int8 DISAPPEARED=28
int8 NO_EFFECT=29
int8 GRASPED=30
int8 DONTCARE=31
int8 NO_CHANGE=32
int8 REACHED=33
int8 ACQUIRED=34
int8 RELEASED=35
int8 TAKEN=36
int8 GIVEN=37
int8 CONTINUE=38

int8 speech_cmd
int8 speech_arg

"""
  # Pseudo-constants
  MAX_ACTION_INDEX = 19
  MAX_EFFECT_INDEX = 39
  PUSH_RIGHT = 0
  PUSH_LEFT = 1
  PUSH_FORWARD = 2
  PUSH_BACKWARD = 3
  LIFT = 4
  GRASP = 5
  HOME = 6
  POINT = 7
  HIDE = 8
  CANCEL = 9
  STOP = 10
  SHOW = 11
  TUCK_ARMS = 12
  LOOK_AT_REGION = 13
  LOOK_AT_POINT = 14
  LOOK_AT_FACE = 15
  REACH = 16
  TAKE = 17
  GIVE = 18
  RELEASE = 19
  PUSHED_RIGHT = 20
  PUSHED_LEFT = 21
  PUSHED_FORWARD = 22
  PUSHED_BACKWARD = 23
  ROLLED_RIGHT = 24
  ROLLED_LEFT = 25
  ROLLED_FORWARD = 26
  LIFTED = 27
  DISAPPEARED = 28
  NO_EFFECT = 29
  GRASPED = 30
  DONTCARE = 31
  NO_CHANGE = 32
  REACHED = 33
  ACQUIRED = 34
  RELEASED = 35
  TAKEN = 36
  GIVEN = 37
  CONTINUE = 38

  __slots__ = ['speech_cmd','speech_arg']
  _slot_types = ['int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       speech_cmd,speech_arg
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Speech, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.speech_cmd is None:
        self.speech_cmd = 0
      if self.speech_arg is None:
        self.speech_arg = 0
    else:
      self.speech_cmd = 0
      self.speech_arg = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2b.pack(_x.speech_cmd, _x.speech_arg))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.speech_cmd, _x.speech_arg,) = _struct_2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2b.pack(_x.speech_cmd, _x.speech_arg))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.speech_cmd, _x.speech_arg,) = _struct_2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2b = struct.Struct("<2b")
